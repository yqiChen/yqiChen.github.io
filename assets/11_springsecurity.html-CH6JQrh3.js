import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,b as t,o as e}from"./app-Di6OdOcP.js";const p="/image/spring/spring3.png",o="/image/spring/spring4.png",i="/image/spring/spring5.png",c="/image/spring/spring6.png",l="/image/spring/spring7.png",u="/image/spring/spring8.png",r="/image/spring/spring9.png",d={},k=t('<h1 id="springsecurity" tabindex="-1"><a class="header-anchor" href="#springsecurity"><span>SpringSecurity</span></a></h1><h2 id="一、介绍" tabindex="-1"><a class="header-anchor" href="#一、介绍"><span>一、介绍</span></a></h2><h3 id="_1、springsecurity" tabindex="-1"><a class="header-anchor" href="#_1、springsecurity"><span>1、SpringSecurity</span></a></h3><p>认证功能几乎是每个项目都要具备的功能，并且它与业务无关，市面上有很多认证框架，如：Apache Shiro、CAS、Spring Security等。Spring Security是spring家族的一份子且和Spring Cloud集成的很好。Spring Security 是一个功能强大且高度可定制的身份验证和访问控制框架，它是一个专注于为 Java 应用程序提供身份验证和授权的框架。</p><p>Spring Security是Spring项目组提供的安全服务框架，核心功能包 括认证和授权。它为系统提供了声明式安全访问控制功能，减少了 为系统安全而编写大量重复代码的工作。</p><ul><li><p><a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener noreferrer">项目主页</a></p></li><li><p><a href="https://spring.io/projects/spring-cloud-security" target="_blank" rel="noopener noreferrer">Spring cloud Security</a></p></li></ul><div class="hint-container info"><p class="hint-container-title">介绍</p><ul><li><strong>认证</strong></li></ul><p>认证即系统判断用户的身份是否合法，合法可继续访问，不合法则拒绝访问。</p><p>常见的用户身份认证方式有：用户名密码登录、二维码登录、手机短信登录、脸部识别认证、指纹认证等方式。 认证是为了保护系统的隐私数据与资源，用户的身份合法才能访问 该系统的资源。</p><ul><li><strong>授权</strong></li></ul><p>授权即<strong>认证通过后</strong>，根据用户的权限来控制用户访问资源的过程， 拥有资源的访问权限则正常访问，没有权限则拒绝访问。 比如在一 些视频网站中，普通用户登录后只有观看免费视频的权限，而VIP用户登录后，网站会给该用户提供观看VIP视频的权限。</p><p><strong>认证是为了保证用户身份的合法性，授权则是为了更细粒度的对隐私数据进行划分，控制不同的用户能够访问不同的资源。</strong></p><p>举个例子：认证是公司大门识别你作为员工能进入公司，而授权则 是由于你作为公司会计可以进入财务室，查看账目，处理财务数据。</p></div><h3 id="_2、oauth2" tabindex="-1"><a class="header-anchor" href="#_2、oauth2"><span>2、OAuth2</span></a></h3><p>像微信扫码认证这种第三方认证的方式一般都是基于OAuth2协议实现，OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。同时，任何第三方都可以使用OAUTH认证服务，任何服务提供商都可以实现自身的OAUTH认证服务，因而OAUTH是开放的。</p><p>业界提供了OAUTH的多种实现如PHP、JavaScript，Java，Ruby等各种语言开发包，大大节约了程序员的时间，因而OAUTH是简易的。互联网很多服务如Open API，很多大公司如Google，Yahoo，Microsoft等都提供了OAUTH认证服务，这些都足以说明OAUTH标准逐渐成为开放资源授权的标准。</p><p>Oauth协议目前发展到2.0版本，1.0版本过于复杂，2.0版本已得到广泛应用。</p><ul><li><p><a href="https://baike.baidu.com/item/oAuth/7153134?fr=aladdin" target="_blank" rel="noopener noreferrer">参考</a></p></li><li><p><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener noreferrer">Oauth协议</a></p></li></ul><p>Oauth2.0的认证流程，如下：</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Oauth2包括以下角色：</p><ul><li><p>1、客户端</p><ul><li>本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源，比如：手机客户端、浏览器等。</li></ul></li><li><p>2、资源拥有者</p><ul><li><p>通常为用户，也可以是应用程序，即该资源的拥有者。</p></li><li><p>A表示 客户端请求资源拥有者授权。</p></li><li><p>B表示 资源拥有者授权客户端访问自己的用户信息。</p></li></ul></li><li><p>3、授权服务器（也称认证服务器）</p><ul><li><p>认证服务器对资源拥有者进行认证，还会对客户端进行认证并颁发令牌。</p></li><li><p>C 客户端携带授权码请求认证。</p></li><li><p>D认证通过颁发令牌。</p></li></ul></li><li><p>4、资源服务器</p><ul><li><p>存储资源的服务器。</p></li><li><p>E表示客户端携带令牌请求资源服务器获取资源。</p></li><li><p>F表示资源服务器校验令牌通过后提供受保护资源。</p></li></ul></li></ul><h2 id="二、快速入门" tabindex="-1"><a class="header-anchor" href="#二、快速入门"><span>二、快速入门</span></a></h2><h3 id="_1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖"><span>1、引入依赖</span></a></h3><p>向pom.xml加入Spring Security所需要的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、进行安全配置" tabindex="-1"><a class="header-anchor" href="#_2、进行安全配置"><span>2、进行安全配置</span></a></h3><p>WebSecurityConfig.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>securedEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>

    <span class="token comment">//配置用户信息服务</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//这里配置用户信息,这里暂时使用这种方式将用户存储在内存中</span>
        <span class="token class-name">InMemoryUserDetailsManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;p1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;p2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//密码为明文方式</span>
        <span class="token keyword">return</span> <span class="token class-name">NoOpPasswordEncoder</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//配置安全拦截机制</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http
            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/r/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//访问/r开始的请求需要认证通过</span>
            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//其它请求全部放行</span>
            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">successForwardUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login-success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//登录成功跳转到/login-success</span>
            http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/logout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//退出地址</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要配置三部分内容：</p><p>1、用户信息</p><p>在内存配置两个用户：zhangsan、lisi。zhangsan用户拥有的权限为p1，lisi用户拥有的权限为p2</p><p>2、密码方式</p><p>暂时采用明文方式</p><p>3、安全拦截机制</p><p>/r/**开头的请求需要认证，登录成功到成功页面</p><h3 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试"><span>3、测试</span></a></h3><p>之后可以编写介个接口分别进行测试,下边在controller中配置/r/r1需要p1权限，/r/r2需要p2权限。</p><p><code>hasAuthority(&#39;p1&#39;)</code>表示拥有p1权限方可访问。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/r/r1&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">&quot;hasAuthority(&#39;p1&#39;)&quot;</span><span class="token punctuation">)</span><span class="token comment">//拥有p1权限方可访问</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">r1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;访问r1资源&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/r/r2&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">&quot;hasAuthority(&#39;p2&#39;)&quot;</span><span class="token punctuation">)</span><span class="token comment">//拥有p2权限方可访问</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">r2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;访问r2资源&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、工作原理" tabindex="-1"><a class="header-anchor" href="#三、工作原理"><span>三、工作原理</span></a></h2><p>通过测试认证和授权两个功能，我们了解了Spring Security的基本使用方法，下边了解它的工作流程。</p><p>Spring Security所解决的问题就是<strong>安全访问控制</strong>，而安全访问控制功能其实就是对所有进入系统的请求进行拦截，校验每个请求是否能够访问它所期望的资源。根据前边知识的学习，可以通过Filter或AOP等技术来实现，<strong>Spring Security对Web资源的保护是靠Filter实现的</strong>，所以从这个Filter来入手，逐步深入Spring Security原理。</p><p>​ 当初始化Spring Security时，会创建一个名为<code>SpringSecurityFilterChain</code>的Servlet过滤器，类型为<code>org.springframework.security.web.FilterChainProxy</code>，它实现了<code>javax.servlet.Filter</code>，因此外部的请求会经过此类，下图是Spring Security过虑器链结构图：</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>FilterChainProxy</code>是一个代理，真正起作用的是<code>FilterChainProxy中SecurityFilterChain</code>所包含的各个Filter，同时这些Filter作为Bean被Spring管理，它们是Spring Security核心，各有各的职责，但他们并不直接处理用户的<strong>认证</strong>，也不直接处理用户的<strong>授权</strong>，而是把它们交给了 <strong>认证管理器（<code>AuthenticationManager</code>）和决策管理器（<code>AccessDecisionManager</code>）</strong> 进行处理。</p><p>spring Security功能的实现主要是由一系列过滤器链相互配合完成。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下面介绍过滤器链中主要的几个过滤器及其作用：</p><ul><li><p><strong>SecurityContextPersistenceFilter</strong> 这个Filter是整个拦截过程的入口和出口（也就是第一个和最后一个拦截器），会在请求开始时从配置好的<code>SecurityContextRepository</code>中获取 <code>SecurityContext</code>，然后把它设置给<code> SecurityContextHolder</code>。在请求完成后将 <code>SecurityContextHolder</code> 持有的<code>SecurityContext</code>再保存到配置好的<code>SecurityContextRepository</code>，同时清除 <code>securityContextHolder </code>所持有的 <code>SecurityContext</code>；</p></li><li><p><strong>UsernamePasswordAuthenticationFilter</strong> 用于处理来自表单提交的认证。该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的 <code>AuthenticationSuccessHandler </code>和<code> AuthenticationFailureHandler</code>，这些都可以根据需求做相关改变；</p></li><li><p><strong>FilterSecurityInterceptor</strong> 是用于保护web资源的，使用<code>AccessDecisionManager</code>对当前用户进行授权访问，前面已经详细介绍过了；</p></li><li><p><strong>ExceptionTranslationFilter</strong> 能够捕获来自 FilterChain 所有的异常，并进行处理。但是它只会处理两类异常：<code>AuthenticationException </code>和 <code>AccessDeniedException</code>，其它的异常它会继续抛出。</p></li></ul><p>Spring Security的执行流程如下：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><ol><li>用户提交用户名、密码被<code>SecurityFilterChain</code>中的<code>UsernamePasswordAuthenticationFilter</code>过滤器获取到，封装为请求<code>Authentication</code>，通常情况下是<code>UsernamePasswordAuthenticationToken</code>这个实现类。</li></ol></li><li><ol start="2"><li>然后过滤器将<code>Authentication</code>提交至认证管理器（<code>AuthenticationManager</code>）进行认证</li></ol></li><li><ol start="3"><li>认证成功后，<code>AuthenticationManager</code>身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除）<code>Authentication</code>实例。</li></ol></li><li><ol start="4"><li><code>SecurityContextHolder</code>安全上下文容器将第3步填充了信息的<code>Authentication</code>，通过<code>SecurityContextHolder.getContext().setAuthentication(…)</code>方法，设置到其中。</li></ol></li></ul><p>可以看出<code>AuthenticationManager</code>接口（认证管理器）是认证相关的核心接口，也是发起认证的出发点，它的实现类为<code>ProviderManager</code>。而Spring Security支持多种认证方式，因此<code>ProviderManager</code>维护着一个<code>List&lt;AuthenticationProvider&gt;</code>列表，存放多种认证方式，最终实际的认证工作是由<code>AuthenticationProvider</code>完成的。咱们知道web表单的对应的<code>AuthenticationProvider</code>实现类为<code>DaoAuthenticationProvider</code>，它的内部又维护着一个<code>UserDetailsService</code>负责<code>UserDetails</code>的获取。最终<code>AuthenticationProvider</code>将<code>UserDetails</code>填充至<code>Authentication</code>。</p><h2 id="四、oauth2使用" tabindex="-1"><a class="header-anchor" href="#四、oauth2使用"><span>四、OAuth2使用</span></a></h2><h3 id="_1、oauth2在学成在线项目中的应用" tabindex="-1"><a class="header-anchor" href="#_1、oauth2在学成在线项目中的应用"><span>1、OAuth2在学成在线项目中的应用</span></a></h3><p>Oauth2是一个标准的开放的授权协议，应用程序可以根据自己的要求去使用Oauth2，本项目使用Oauth2实现如下目标：</p><p>1、学成在线访问第三方系统的资源。</p><p>本项目要接入微信扫码登录所以本项目要使用OAuth2协议访问微信中的用户信息。</p><p>2、外部系统访问学成在线的资源 。</p><p>同样当第三方系统想要访问学成在线网站的资源也可以基于OAuth2协议。</p><p>3、学成在线前端（客户端） 访问学成在线微服务的资源。</p><p>本项目是前后端分离架构，前端访问微服务资源也可以基于OAuth2协议进行认证。</p><h3 id="_2、oauth2的授权模式" tabindex="-1"><a class="header-anchor" href="#_2、oauth2的授权模式"><span>2、OAuth2的授权模式</span></a></h3><p>Spring Security支持OAuth2认证，OAuth2提供授权码模式、密码模式、简化模式、客户端模式等四种授权模式，前边举的微信扫码登录的例子就是基于授权码模式，这四种模式中授权码模式和密码模式应用较多。</p><h4 id="_1-授权码模式" tabindex="-1"><a class="header-anchor" href="#_1-授权码模式"><span>1）授权码模式</span></a></h4><p>OAuth2的几个授权模式是根据不同的应用场景以不同的方式去获取令牌，最终目的是要获取认证服务颁发的令牌，最终通过令牌去获取资源。</p><p>授权码模式简单理解是使用授权码去获取令牌，要想获取令牌先要获取授权码，授权码的获取需要资源拥有者亲自授权同意才可以获取。</p><p>下图是授权码模式的交互图：</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以黑马网站微信扫码登录为例进行说明：</p><p>1、用户打开浏览器。</p><p>2、通过浏览器访问客户端即黑马网站。</p><p>3、用户通过浏览器向认证服务请求授权，请求授权时会携带客户端的URL，此URL为下发授权码的重定向地址。</p><p>4、认证服务向资源拥有者返回授权页面。</p><p>5、资源拥有者亲自授权同意。</p><p>6、通过浏览器向认证服务发送授权同意。</p><p>7、认证服务向客户端地址重定向并携带授权码。</p><p>8、客户端即黑马网站收到授权码。</p><p>9、客户端携带授权码向认证服务申请令牌。</p><p>10、认证服务向客户端颁发令牌。</p><p><strong>授权码模式测试</strong></p><p>首先要配置授权服务器即上图中的认证服务器，需要配置授权服务及令牌策略。</p><p>配置AuthorizationServer:</p><p><strong>1）ClientDetailsServiceConfigurer</strong>：用来配置客户端详情服务（ClientDetailsService），</p><p>随便一个客户端都可以随便接入到它的认证服务吗？答案是否定的，服务提供商会给批准接入的客户端一个身份，用于接入时的凭据，有客户端标识和客户端秘钥，在这里配置批准接入的客户端的详细信息。</p><p><strong>2）AuthorizationServerEndpointsConfigurer</strong>：用来配置令牌（token）的访问端点和令牌服务(token services)。</p><p><strong>3）AuthorizationServerSecurityConfigurer</strong>：用来配置令牌端点的安全约束.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpMethod</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>configurers<span class="token punctuation">.</span></span><span class="token class-name">ClientDetailsServiceConfigurer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">AuthorizationServerConfigurerAdapter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableAuthorizationServer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configurers<span class="token punctuation">.</span></span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configurers<span class="token punctuation">.</span></span><span class="token class-name">AuthorizationServerSecurityConfigurer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span></span><span class="token class-name">AuthorizationServerTokenServices</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

 <span class="token annotation punctuation">@Configuration</span>
 <span class="token annotation punctuation">@EnableAuthorizationServer</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServer</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">{</span>

     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;authorizationServerTokenServicesCustom&quot;</span><span class="token punctuation">)</span>
   	 <span class="token keyword">private</span> <span class="token class-name">AuthorizationServerTokenServices</span> authorizationServerTokenServices<span class="token punctuation">;</span>

  	 <span class="token annotation punctuation">@Autowired</span>
  	 <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>

      <span class="token comment">//客户端详情服务</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span>
              <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            clients<span class="token punctuation">.</span><span class="token function">inMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用in-memory存储</span>
                    <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span><span class="token string">&quot;XcWebApp&quot;</span><span class="token punctuation">)</span><span class="token comment">// client_id</span>
    <span class="token comment">//                .secret(&quot;XcWebApp&quot;)//客户端密钥</span>
                    <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;XcWebApp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//客户端密钥</span>
                    <span class="token punctuation">.</span><span class="token function">resourceIds</span><span class="token punctuation">(</span><span class="token string">&quot;xuecheng-plus&quot;</span><span class="token punctuation">)</span><span class="token comment">//资源列表</span>
                    <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span><span class="token string">&quot;authorization_code&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;client_credentials&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;implicit&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;refresh_token&quot;</span><span class="token punctuation">)</span><span class="token comment">// 该client允许的授权类型authorization_code,password,refresh_token,implicit,client_credentials</span>
                    <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token comment">// 允许的授权范围</span>
                    <span class="token punctuation">.</span><span class="token function">autoApprove</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//false跳转到授权页面</span>
                    <span class="token comment">//客户端接收授权码的重定向地址</span>
                    <span class="token punctuation">.</span><span class="token function">redirectUris</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.51xuecheng.cn&quot;</span><span class="token punctuation">)</span>
       <span class="token punctuation">;</span>
      <span class="token punctuation">}</span>


      <span class="token comment">//令牌端点的访问配置</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       endpoints
               <span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token comment">//认证管理器</span>
               <span class="token punctuation">.</span><span class="token function">tokenServices</span><span class="token punctuation">(</span>authorizationServerTokenServices<span class="token punctuation">)</span><span class="token comment">//令牌管理服务</span>
               <span class="token punctuation">.</span><span class="token function">allowedTokenEndpointRequestMethods</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">//令牌端点的安全配置</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerSecurityConfigurer</span> security<span class="token punctuation">)</span><span class="token punctuation">{</span>
       security
               <span class="token punctuation">.</span><span class="token function">tokenKeyAccess</span><span class="token punctuation">(</span><span class="token string">&quot;permitAll()&quot;</span><span class="token punctuation">)</span>                    <span class="token comment">//oauth/token_key是公开</span>
               <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">&quot;permitAll()&quot;</span><span class="token punctuation">)</span>                  <span class="token comment">//oauth/check_token公开</span>
               <span class="token punctuation">.</span><span class="token function">allowFormAuthenticationForClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment">//表单认证（申请令牌）</span>
       <span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置TokenConfig.java令牌策略配置类:</p><p>暂时先使用InMemoryTokenStore在内存存储令牌，令牌的有效期等信息配置如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Lazy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span></span><span class="token class-name">AuthorizationServerTokenServices</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span></span><span class="token class-name">DefaultTokenServices</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span></span><span class="token class-name">TokenEnhancerChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span></span><span class="token class-name">TokenStore</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span>store<span class="token punctuation">.</span></span><span class="token class-name">JwtAccessTokenConverter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span>store<span class="token punctuation">.</span></span><span class="token class-name">JwtTokenStore</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> Administrator
 * <span class="token keyword">@version</span> 1.0
 **/</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token constant">SIGNING_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;mq123&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Lazy</span>
    <span class="token class-name">TokenStore</span> tokenStore<span class="token punctuation">;</span>

<span class="token comment">//    @Bean</span>
<span class="token comment">//    public TokenStore tokenStore() {</span>
<span class="token comment">//        //使用内存存储令牌（普通令牌）</span>
<span class="token comment">//        return new InMemoryTokenStore();</span>
<span class="token comment">//    }</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Lazy</span>
    <span class="token keyword">private</span> <span class="token class-name">JwtAccessTokenConverter</span> accessTokenConverter<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JwtAccessTokenConverter</span> <span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JwtAccessTokenConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        converter<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token constant">SIGNING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//令牌管理服务</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;authorizationServerTokenServicesCustom&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthorizationServerTokenServices</span> <span class="token function">tokenService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultTokenServices</span> service<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">setSupportRefreshToken</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//支持刷新令牌</span>
        service<span class="token punctuation">.</span><span class="token function">setTokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//令牌存储策略</span>

        <span class="token class-name">TokenEnhancerChain</span> tokenEnhancerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenEnhancerChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tokenEnhancerChain<span class="token punctuation">.</span><span class="token function">setTokenEnhancers</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>accessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">setTokenEnhancer</span><span class="token punctuation">(</span>tokenEnhancerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>

        service<span class="token punctuation">.</span><span class="token function">setAccessTokenValiditySeconds</span><span class="token punctuation">(</span><span class="token number">7200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 令牌默认有效期2小时</span>
        service<span class="token punctuation">.</span><span class="token function">setRefreshTokenValiditySeconds</span><span class="token punctuation">(</span><span class="token number">259200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 刷新令牌默认有效期3天</span>
        <span class="token keyword">return</span> service<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置认证管理Bean</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>securedEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启认证服务</p><ul><li><strong>1）get请求获取授权码</strong></li></ul><p>地址:</p><p><code> http://localhost:63070/auth/oauth/authorize?client_id=XcWebApp&amp;response_type=code&amp;scope=all&amp;redirect_uri=http://www.51xuecheng.cn</code></p><p>参数列表如下：</p><ul><li>client_id：客户端准入标识。</li><li>response_type：授权码模式固定为code。</li><li>scope：客户端权限。</li><li>redirect_uri：跳转uri，当授权码申请成功后会跳转到此地址，并在后边带上code参数（授权码）。</li></ul><p>输入账号zhangsan、密码123登录成功，输入:</p><p><code>/oauth/authorize?client_id=XcWebApp&amp;response_type=code&amp;scope=all&amp;redirect_uri=http://www.51xuecheng.cn</code></p><p>显示授权页面:授权“XcWebApp”访问自己的受保护资源?选择同意。</p><ul><li><p><strong>2）请求成功</strong></p><p>重定向至<code>http://www.51xuecheng.cn/?code=授权码</code>，比如：<code>http://www.51xuecheng.cn/?code=Wqjb5H</code></p></li><li><p><strong>3）使用httpclient工具post申请令牌</strong></p></li></ul><p><code>/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=authorization_code&amp;code=授权码&amp;redirect_uri=http://www.51xuecheng.cn/</code></p><p>参数列表如下</p><ul><li>client_id：客户端准入标识。</li><li>client_secret：客户端秘钥。</li><li>grant_type：授权类型，填写authorization_code，表示授权码模式</li><li>code：授权码，就是刚刚获取的授权码，注意：授权码只使用一次就无效了，需要重新申请。</li><li>redirect_uri：申请授权码时的跳转url，一定和申请授权码时用的redirect_uri一致。</li></ul><p>httpclient脚本如下：</p><div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>### 授权码模式
### 第一步申请授权码(浏览器请求)/oauth/authorize?client_id=c1&amp;response_type=code&amp;scope=all&amp;redirect_uri=http://www.51xuecheng.cn
### 第二步申请令牌
POST {{auth_host}}/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=authorization_code&amp;code=CTvCrB&amp;redirect_uri=http://www.51xuecheng.cn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>申请令牌成功如下所示：</p><div class="language-JSON line-numbers-mode" data-ext="JSON" data-title="JSON"><pre class="language-JSON"><code>{
  &quot;access_token&quot;: &quot;368b1ee7-a9ee-4e9a-aae6-0fcab243aad2&quot;,
  &quot;token_type&quot;: &quot;bearer&quot;,
  &quot;refresh_token&quot;: &quot;3d56e139-0ee6-4ace-8cbe-1311dfaa991f&quot;,
  &quot;expires_in&quot;: 7199,
  &quot;scope&quot;: &quot;all&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li><p>1、access_token，访问令牌，用于访问资源使用。</p></li><li><p>2、token_type，bearer是在RFC6750中定义的一种token类型，在携带令牌访问资源时需要在head中加入bearer 空格 令牌内容</p></li><li><p>3、refresh_token，当令牌快过期时使用刷新令牌可以再次生成令牌。</p></li><li><p>4、expires_in：过期时间（秒）</p></li><li><p>5、scope，令牌的权限范围，服务端可以根据令牌的权限范围去对令牌授权。</p></li></ul><h4 id="_2-密码模式" tabindex="-1"><a class="header-anchor" href="#_2-密码模式"><span>2）密码模式</span></a></h4><p>密码模式相对授权码模式简单，授权码模式需要借助浏览器供用户亲自授权，密码模式不用借助浏览器，如下图：</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>1、资源拥有者提供账号和密码</p><p>2、客户端向认证服务申请令牌，请求中携带账号和密码</p><p>3、认证服务校验账号和密码正确颁发令牌。</p><p>开始测试：</p><p><strong>1)POST请求获取令牌</strong></p><p><code>/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=shangsan&amp;password=123</code></p><p>参数列表如下：</p><ul><li>client_id：客户端准入标识。</li><li>client_secret：客户端秘钥。</li><li>grant_type：授权类型，填写password表示密码模式</li><li>username：资源拥有者用户名。</li><li>password：资源拥有者密码。</li></ul><p><strong>2）授权服务器将令牌（access_token）发送给client</strong></p><p>使用httpclient进行测试</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>### 密码模式
POST {{auth_host}}/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=zhangsan&amp;password=123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>返回示例：</p><div class="language-JSON line-numbers-mode" data-ext="JSON" data-title="JSON"><pre class="language-JSON"><code>{
  &quot;access_token&quot;: &quot;368b1ee7-a9ee-4e9a-aae6-0fcab243aad2&quot;,
  &quot;token_type&quot;: &quot;bearer&quot;,
  &quot;refresh_token&quot;: &quot;3d56e139-0ee6-4ace-8cbe-1311dfaa991f&quot;,
  &quot;expires_in&quot;: 6806,
  &quot;scope&quot;: &quot;all&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这种模式十分简单，但是却意味着直接将用户敏感信息泄漏给了client，因此这就说明这种模式只能用于client是我们自己开发的情况下。</p><h3 id="_3、使用jwt令牌" tabindex="-1"><a class="header-anchor" href="#_3、使用jwt令牌"><span>3、使用JWT令牌</span></a></h3><p>在认证服务中配置jwt令牌服务，即可实现生成jwt格式的令牌,</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenConfig</span> <span class="token punctuation">{</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">TokenStore</span> tokenStore<span class="token punctuation">;</span>
  
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JwtAccessTokenConverter</span> <span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JwtAccessTokenConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        converter<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token constant">SIGNING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JwtAccessTokenConverter</span> accessTokenConverter<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
			<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿到了jwt令牌下一步就要携带令牌去访问资源服务中的资源，本项目各个微服务就是资源服务，比如：内容管理服务，客户端申请到jwt令牌，携带jwt去内容管理服务查询课程信息，此时内容管理服务要对jwt进行校验，只有jwt合法才可以继续访问。如下图：</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>1、在内容管理服务的content-api工程中添加依赖</p><div class="language-XML line-numbers-mode" data-ext="XML" data-title="XML"><pre class="language-XML"><code>&lt;!--认证相关--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、配置TokenConfig和ResouceServerConfig 到内容管理的api工程的config包下。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenConfig</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token constant">SIGNING_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;mq123&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Lazy</span>
    <span class="token keyword">private</span> <span class="token class-name">JwtAccessTokenConverter</span> accessTokenConverter<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JwtAccessTokenConverter</span> <span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JwtAccessTokenConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        converter<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token constant">SIGNING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在ResouceServerConfig类中配置需要认证的url。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code> @Configuration
 @EnableResourceServer
 @EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true)
 public class ResouceServerConfig extends ResourceServerConfigurerAdapter {

  //资源服务标识
  public static final String RESOURCE_ID = &quot;xuecheng-plus&quot;;

  @Autowired
  TokenStore tokenStore;

  @Override
  public void configure(ResourceServerSecurityConfigurer resources) {
   resources.resourceId(RESOURCE_ID)//资源 id
           .tokenStore(tokenStore)
           .stateless(true);
  }

 @Override
 public void configure(HttpSecurity http) throws Exception {
  http.csrf().disable()
          .authorizeRequests()
    			.antMatchers(&quot;/r/**&quot;,&quot;/course/**&quot;).authenticated()//所有/r/**的请求必须认证通过
          .anyRequest().permitAll()
  ;
 }

 }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启内容管理服务</p><p>使用httpclient测试：</p><p>1、访问根据课程id查询课程接口</p><div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>### 查询课程信息
GET http://localhost:63040/content/course/2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>返回：</p><div class="language-JSON line-numbers-mode" data-ext="JSON" data-title="JSON"><pre class="language-JSON"><code>{
  &quot;error&quot;: &quot;unauthorized&quot;,
  &quot;error_description&quot;: &quot;Full authentication is required to access this resource&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从返回信息可知当前没有认证。</p><p>下边携带JWT令牌访问接口：</p><p>1、申请jwt令牌</p><p>采用密码模式去认证服务申请令牌。</p><p>2、携带jwt令牌访问资源服务地址</p><div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>### 携带token访问资源服务
GET http://localhost:63040/content/course/2
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJ6aGFuZ3NhbiIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NjQzMzM0OTgsImF1dGhvcml0aWVzIjpbInAxIl0sImp0aSI6IjhhM2M2OTk1LWU1ZGEtNDQ1Yy05ZDAyLTEwNDFlYzk3NTkwOSIsImNsaWVudF9pZCI6ImMxIn0.73eNDxTX5ifttGCjwc7xrd-Sbp_mCfcIerI3lGetZto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在请求头中添加Authorization，内容为Bearer 令牌，Bearer用于通过oauth2.0协议访问资源。</p><p>如果携带jwt令牌且jwt正确则正常访问资源服务的内容。如果不正确则报令牌无效的错误：</p><div class="language-JSON line-numbers-mode" data-ext="JSON" data-title="JSON"><pre class="language-JSON"><code>{
  &quot;error&quot;: &quot;invalid_token&quot;,
  &quot;error_description&quot;: &quot;Cannot convert access token to JSON&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、获取用户身份" tabindex="-1"><a class="header-anchor" href="#_4、获取用户身份"><span>4、获取用户身份</span></a></h3><p>jwt令牌中记录了用户身份信息，当客户端携带jwt访问资源服务，资源服务验签通过后将前两部分的内容还原即可取出用户的身份信息，并将用户身份信息放在了SecurityContextHolder上下文，SecurityContext与当前线程进行绑定，方便获取用户身份。</p><p>还以查询课程接口为例，进入查询课程接口的代码中，添加获取用户身份的代码</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>@ApiOperation(&quot;根据课程id查询课程基础信息&quot;)
@GetMapping(&quot;/course/{courseId}&quot;)
public CourseBaseInfoDto getCourseBaseById(@PathVariable(&quot;courseId&quot;) Long courseId){
    //取出当前用户身份
    Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    System.out.println(principal);
    return courseBaseInfoService.getCourseBaseInfo(courseId);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><p>[1] <a href="https://juejin.cn/post/7194815689541025853" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7194815689541025853</a></p>`,156);function v(m,g){return e(),s("div",null,[a("more-"),k])}const y=n(d,[["render",v],["__file","11_springsecurity.html.vue"]]),f=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/springboot/11_springsecurity.html","title":"SpringSecurity","lang":"zh-CN","frontmatter":{"title":"SpringSecurity","date":"2024-07-31T00:00:00.000Z","tags":"Spring","category":"Spring","order":11,"icon":"/img/spring-security.svg","description":"SpringSecurity 一、介绍 1、SpringSecurity 认证功能几乎是每个项目都要具备的功能，并且它与业务无关，市面上有很多认证框架，如：Apache Shiro、CAS、Spring Security等。Spring Security是spring家族的一份子且和Spring Cloud集成的很好。Spring Security 是...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/springboot/11_springsecurity.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"SpringSecurity"}],["meta",{"property":"og:description","content":"SpringSecurity 一、介绍 1、SpringSecurity 认证功能几乎是每个项目都要具备的功能，并且它与业务无关，市面上有很多认证框架，如：Apache Shiro、CAS、Spring Security等。Spring Security是spring家族的一份子且和Spring Cloud集成的很好。Spring Security 是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/image/spring/spring3.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-09T11:07:04.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-09T11:07:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringSecurity\\",\\"image\\":[\\"https://mister-hope.github.io/image/spring/spring3.png\\",\\"https://mister-hope.github.io/image/spring/spring4.png\\",\\"https://mister-hope.github.io/image/spring/spring5.png\\",\\"https://mister-hope.github.io/image/spring/spring6.png\\",\\"https://mister-hope.github.io/image/spring/spring7.png\\",\\"https://mister-hope.github.io/image/spring/spring8.png\\",\\"https://mister-hope.github.io/image/spring/spring9.png\\"],\\"datePublished\\":\\"2024-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-09T11:07:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、介绍","slug":"一、介绍","link":"#一、介绍","children":[{"level":3,"title":"1、SpringSecurity","slug":"_1、springsecurity","link":"#_1、springsecurity","children":[]},{"level":3,"title":"2、OAuth2","slug":"_2、oauth2","link":"#_2、oauth2","children":[]}]},{"level":2,"title":"二、快速入门","slug":"二、快速入门","link":"#二、快速入门","children":[{"level":3,"title":"1、引入依赖","slug":"_1、引入依赖","link":"#_1、引入依赖","children":[]},{"level":3,"title":"2、进行安全配置","slug":"_2、进行安全配置","link":"#_2、进行安全配置","children":[]},{"level":3,"title":"3、测试","slug":"_3、测试","link":"#_3、测试","children":[]}]},{"level":2,"title":"三、工作原理","slug":"三、工作原理","link":"#三、工作原理","children":[]},{"level":2,"title":"四、OAuth2使用","slug":"四、oauth2使用","link":"#四、oauth2使用","children":[{"level":3,"title":"1、OAuth2在学成在线项目中的应用","slug":"_1、oauth2在学成在线项目中的应用","link":"#_1、oauth2在学成在线项目中的应用","children":[]},{"level":3,"title":"2、OAuth2的授权模式","slug":"_2、oauth2的授权模式","link":"#_2、oauth2的授权模式","children":[]},{"level":3,"title":"3、使用JWT令牌","slug":"_3、使用jwt令牌","link":"#_3、使用jwt令牌","children":[]},{"level":3,"title":"4、获取用户身份","slug":"_4、获取用户身份","link":"#_4、获取用户身份","children":[]}]}],"git":{"createdTime":1723201624000,"updatedTime":1723201624000,"contributors":[{"name":"yqiChen","email":"chenyuqi1229@gmail.com","commits":1}]},"readingTime":{"minutes":16.87,"words":5061},"filePathRelative":"posts/后端/springboot/11_springsecurity.md","localizedDate":"2024年7月31日","excerpt":"<!--more--->\\n<h1>SpringSecurity</h1>\\n<h2>一、介绍</h2>\\n<h3>1、SpringSecurity</h3>\\n<p>认证功能几乎是每个项目都要具备的功能，并且它与业务无关，市面上有很多认证框架，如：Apache Shiro、CAS、Spring Security等。Spring Security是spring家族的一份子且和Spring Cloud集成的很好。Spring Security 是一个功能强大且高度可定制的身份验证和访问控制框架，它是一个专注于为 Java 应用程序提供身份验证和授权的框架。</p>\\n<p>Spring Security是Spring项目组提供的安全服务框架，核心功能包 括认证和授权。它为系统提供了声明式安全访问控制功能，减少了 为系统安全而编写大量重复代码的工作。</p>","autoDesc":true}');export{y as comp,f as data};
