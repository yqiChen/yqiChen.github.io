import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,b as t,o as e}from"./app-Di6OdOcP.js";const p="/image/cloud/cloud41.png",i="/image/cloud/cloud42.png",o="/image/cloud/cloud43.png",c="/image/cloud/cloud44.png",l="/image/cloud/cloud45.png",u="/image/cloud/cloud46.png",r="/image/cloud/cloud47.png",d="/image/cloud/cloud48.png",k={},m=t('<h1 id="minio分布式文件系统" tabindex="-1"><a class="header-anchor" href="#minio分布式文件系统"><span>MinIO分布式文件系统</span></a></h1><h2 id="一、分布式文件系统" tabindex="-1"><a class="header-anchor" href="#一、分布式文件系统"><span>一、分布式文件系统</span></a></h2><h3 id="_1、文件系统" tabindex="-1"><a class="header-anchor" href="#_1、文件系统"><span>1、文件系统</span></a></h3><p>文件系统是负责管理和存储文件的系统软件，操作系统通过文件系统提供的接口去存取文件，用户通过操作系统访问磁盘上的文件。</p><p>下图指示了文件系统所处的位置：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在已知的操作系统中，它们分别支持多种不同的文件系统。Windows 下支持 FAT、FAT32、NTFS，Linux 支持十多种的文件系统，例如：EXT2、EXT3、EXT4、NFS、NTFS等。</p><div class="hint-container info"><p class="hint-container-title">问题？</p><p>一此短视频平台拥有大量的视频、图片，这些视频文件、图片文件该如何存储呢？如何存储可以满足互联网上海量用户的浏览。</p></div><p>通过概念可以简单理解为：一个计算机无法存储海量的文件，通过网络将若干计算机组织起来共同去存储海量的文件，去接收海量用户的请求，这些组织起来的计算机通过网络进行通信，如下图：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">好处：</p><p>1、一台计算机的文件系统处理能力扩充到多台计算机同时处理。</p><p>2、一台计算机挂了还有另外副本计算机提供数据。</p><p>3、每台计算机可以放在不同的地域，这样用户就可以就近访问，提高访问速度。</p></div><h3 id="_2、分布式文件系统" tabindex="-1"><a class="header-anchor" href="#_2、分布式文件系统"><span>2、分布式文件系统</span></a></h3><h4 id="_1-nfs" tabindex="-1"><a class="header-anchor" href="#_1-nfs"><span>1）NFS</span></a></h4><p>网络文件系统（NFS）是文件系统之上的一个网络抽象，来允许远程客户端以与本地文件系统类似的方式，来通过网络进行访问。虽然 NFS 不是第一个此类系统，但是它已经发展并演变成 UNIX系统中最强大最广泛使用的网络文件系统。NFS 允许在多个用户之间共享公共文件系统，并提供数据集中的优势，来最小化所需的存储空间。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container important"><p class="hint-container-title">特点：</p><ul><li><p>在客户端上映射NFS服务器的驱动器。</p></li><li><p>客户端通过网络访问NFS服务器的硬盘完全透明。</p></li></ul></div><h4 id="_2-gfs" tabindex="-1"><a class="header-anchor" href="#_2-gfs"><span>2）GFS</span></a></h4><p>GFS是一个可扩展的分布式文件系统，用于大型的、分布式的、对人量数据进行访问的应用。它运行于廉价的普通硬件上。可以提供容错功能。它可以给大量的用户提供总体性能较高的服务。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li><p>GFS采用主从结构，一个GFS集群由一个master和大量的chunkserver组成。</p></li><li><p>master存储了数据文件的元数据，一个文件被分成了若干块存储在多个chunkserver中。</p></li><li><p>用户从master中获取数据元信息，向chunkserver存储数据。</p></li></ul></div><h4 id="_3-hdfs" tabindex="-1"><a class="header-anchor" href="#_3-hdfs"><span>3）HDFS</span></a></h4><p>HDFS，是Hadoop Distributed File System的简称，是Hadoop抽象文件系统的一种实现。HDFS是一个高度容错性的系统，适合部署在廉价的机器上。HDFS能提供高吞吐量的数据访问，非常适合大规模数据集上的应用。 HDFS的文件分布在集群机器上，同时提供副本进行容错及可靠性保证。例如客户端写入读取文件的直接操作都是分布在集群各个机器上的，没有单点性能压力。</p><p>下图是HDFS的架构图：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li><p>HDFS采用主从结构，一个HDFS集群由一个名称结点和若干数据结点组成。</p></li><li><p>名称结点存储数据的元信息，一个完整的数据文件分成若干块存储在数据结点。</p></li><li><p>客户端从名称结点获取数据的元信息及数据分块的信息，得到信息客户端即可从数据块来存取数据。</p></li></ul></div><h4 id="_4-云计算厂家" tabindex="-1"><a class="header-anchor" href="#_4-云计算厂家"><span>4）云计算厂家</span></a></h4><ul><li><p>阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。其数据设计持久性不低于 99.9999999999%（12 个 9），服务设计可用性（或业务连续性）不低于 99.995%。<a href="https://www.aliyun.com/product/oss" target="_blank" rel="noopener noreferrer">官方网站</a></p></li><li><p>百度对象存储BOS提供稳定、安全、高效、高可扩展的云存储服务。您可以将任意数量和形式的非结构化数据存入BOS，并对数据进行管理和处理。BOS支持标准、低频、冷和归档存储等多种存储类型，满足多场景的存储需求。 <a href="https://cloud.baidu.com/product/bos.html" target="_blank" rel="noopener noreferrer">官方网站</a></p></li></ul><h2 id="二、minio" tabindex="-1"><a class="header-anchor" href="#二、minio"><span>二、MinIO</span></a></h2><h3 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍"><span>1、介绍</span></a></h3><p>MinIO 是一个非常轻量的服务,可以很简单的和其他应用的结合使用，它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等。</p><p>它一大特点就是轻量，使用简单，功能强大，支持各种平台，单个文件最大5TB，兼容 Amazon S3接口，提供了 Java、Python、GO等多版本SDK支持。</p><ul><li><p><a href="https://min.io" target="_blank" rel="noopener noreferrer">官网</a></p></li><li><p><a href="https://www.minio.org.cn/" target="_blank" rel="noopener noreferrer">中文</a></p></li></ul><p>MinIO集群采用去中心化共享架构，每个结点是对等关系，通过Nginx可对MinIO进行负载均衡访问。</p><p><strong>去中心化有什么好处？</strong></p><p>在大数据领域，通常的设计理念都是无中心和分布式。Minio分布式模式可以帮助你搭建一个高可用的对象存储服务，你可以使用这些存储设备，而不用考虑其真实物理位置。</p><p>它将分布在不同服务器上的多块硬盘组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式Minio避免了单点故障。如下图：</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Minio使用纠删码技术来保护数据，它是一种恢复丢失和损坏数据的数学算法，它将数据分块冗余的分散存储在各各节点的磁盘上，所有的可用磁盘组成一个集合。</p><ul><li><p>上图由8块硬盘组成一个集合，当上传一个文件时会通过纠删码算法计算对文件进行分块存储，除了将文件本身分成4个数据块，还会生成4个校验块，数据块和校验块会分散的存储在这8块硬盘上。</p></li><li><p>使用纠删码的好处是即便丢失一半数量（N/2）的硬盘，仍然可以恢复数据。 比如上边集合中有4个以内的硬盘损害仍可保证数据恢复，不影响上传和下载，如果多于一半的硬盘坏了则无法恢复。</p></li></ul><h3 id="_2、部署" tabindex="-1"><a class="header-anchor" href="#_2、部署"><span>2、部署</span></a></h3><p>使用docker来部署minio服务，具体步骤如下：</p><p><strong>1)编写docker-compose.yml文件</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">minio</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> minio/minio
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> minio
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /root/minio/data1<span class="token punctuation">:</span>/data1
      <span class="token punctuation">-</span> /root/minio/data2<span class="token punctuation">:</span>/data2
      <span class="token punctuation">-</span> /root/minio/data3<span class="token punctuation">:</span>/data3
    <span class="token key atrule">command</span><span class="token punctuation">:</span> server <span class="token punctuation">-</span><span class="token punctuation">-</span>console<span class="token punctuation">-</span>address &quot;<span class="token punctuation">:</span>9001&quot; /data1 /data2 /data3
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;9000:9000&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;9001:9001&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MINIO_ACCESS_KEY</span><span class="token punctuation">:</span> minio
      <span class="token key atrule">MINIO_SECRET_KEY</span><span class="token punctuation">:</span> minio
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">hm-net</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于只使用了一台服务器，所以使用了三个文件夹来模拟多个节点，有的版本会要求至少四个节点</p></div><p><strong>2)运行</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后访问<a href="http://localhost:9001" target="_blank" rel="noopener noreferrer">http://localhost:9001</a> 进入UI界面。</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3、sdk" tabindex="-1"><a class="header-anchor" href="#_3、sdk"><span>3、SDK</span></a></h3><p>MinIO提供多个语言版本SDK的支持，下边找到java版本的文档：</p><p>地址：<a href="https://docs.min.io/docs/java-client-quickstart-guide.html" target="_blank" rel="noopener noreferrer">https://docs.min.io/docs/java-client-quickstart-guide.html</a></p><p>最低需求Java 1.8或更高版本:</p><p>maven依赖如下：</p><div class="language-XML line-numbers-mode" data-ext="XML" data-title="XML"><pre class="language-XML"><code>&lt;dependency&gt;
    &lt;groupId&gt;io.minio&lt;/groupId&gt;
    &lt;artifactId&gt;minio&lt;/artifactId&gt;
    &lt;version&gt;8.4.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
    &lt;version&gt;4.8.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要三个参数才能连接到minio服务:</p><ul><li>Endpoint 对象存储服务的URL</li><li>Access Key 账号</li><li>Secret Key 密码</li></ul><p>官方的示例代码如下：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>import io.minio.BucketExistsArgs;
import io.minio.MakeBucketArgs;
import io.minio.MinioClient;
import io.minio.UploadObjectArgs;
import io.minio.errors.MinioException;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
public class FileUploader {
  public static void main(String[] args)throws IOException, NoSuchAlgorithmException, InvalidKeyException {
    try {
      // Create a minioClient with the MinIO server playground, its access key and secret key.
      MinioClient minioClient =
          MinioClient.builder()
              .endpoint(&quot;https://play.min.io&quot;)
              .credentials(&quot;Q3AM3UQ867SPQQA43P2F&quot;, &quot;zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG&quot;)
              .build();
      // Make &#39;asiatrip&#39; bucket if not exist.
      boolean found =
          minioClient.bucketExists(BucketExistsArgs.builder().bucket(&quot;asiatrip&quot;).build());
      if (!found) {
        // Make a new bucket called &#39;asiatrip&#39;.
        minioClient.makeBucket(MakeBucketArgs.builder().bucket(&quot;asiatrip&quot;).build());
      } else {
        System.out.println(&quot;Bucket &#39;asiatrip&#39; already exists.&quot;);
      }
      // Upload &#39;/home/user/Photos/asiaphotos.zip&#39; as object name &#39;asiaphotos-2015.zip&#39; to bucket
      // &#39;asiatrip&#39;.
      minioClient.uploadObject(
          UploadObjectArgs.builder()
              .bucket(&quot;asiatrip&quot;)
              .object(&quot;asiaphotos-2015.zip&quot;)
              .filename(&quot;/home/user/Photos/asiaphotos.zip&quot;)
              .build());
      System.out.println(
          &quot;&#39;/home/user/Photos/asiaphotos.zip&#39; is successfully uploaded as &quot;
              + &quot;object &#39;asiaphotos-2015.zip&#39; to bucket &#39;asiatrip&#39;.&quot;);
    } catch (MinioException e) {
      System.out.println(&quot;Error occurred: &quot; + e);
      System.out.println(&quot;HTTP trace: &quot; + e.httpTrace());
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>创建完bucket之后要将bucket修改为public</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p><strong>上传：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token class-name">MinioClient</span> minioClient <span class="token operator">=</span>
            <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.101.65:9000&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span><span class="token string">&quot;minioadmin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;minioadmin&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">//上传文件</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//根据扩展名取出mimeType</span>
        <span class="token class-name">ContentInfo</span> extensionMatch <span class="token operator">=</span> <span class="token class-name">ContentInfoUtil</span><span class="token punctuation">.</span><span class="token function">findExtensionMatch</span><span class="token punctuation">(</span><span class="token string">&quot;.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> mimeType <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_OCTET_STREAM_VALUE</span><span class="token punctuation">;</span><span class="token comment">//通用mimeType，字节流</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>extensionMatch<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            mimeType <span class="token operator">=</span> extensionMatch<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">UploadObjectArgs</span> testbucket <span class="token operator">=</span> <span class="token class-name">UploadObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">&quot;testbucket&quot;</span><span class="token punctuation">)</span>
										 <span class="token comment">//.object(&quot;test001.mp4&quot;)</span>
                    <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">&quot;001/test001.mp4&quot;</span><span class="token punctuation">)</span><span class="token comment">//添加子目录</span>
                    <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\develop\\\\upload\\\\1mp4.temp&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token comment">//默认根据扩展名确定文件内容类型，也可以指定</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            minioClient<span class="token punctuation">.</span><span class="token function">uploadObject</span><span class="token punctuation">(</span>testbucket<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上传成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上传失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行upload方法，分别测试向桶的根目录上传文件以及子目录上传文件。</p><p>说明：</p><p>设置contentType可以通过com.j256.simplemagic.ContentType枚举类查看常用的mimeType（媒体类型）</p><p>通过扩展名得到mimeType，代码如下：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>    //根据扩展名取出mimeType
    ContentInfo extensionMatch = ContentInfoUtil.findExtensionMatch(&quot;.mp4&quot;);
    String mimeType = MediaType.APPLICATION_OCTET_STREAM_VALUE;//通用mimeType，字节流

		if(extensionMatch!=null){
            mimeType = extensionMatch.getMimeType();
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除文件</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        minioClient<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>
         <span class="token class-name">RemoveObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">&quot;testbucket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">&quot;001/test001.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查询文件</strong></p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>//查询文件
@Test
public void getFile() {
    GetObjectArgs getObjectArgs = GetObjectArgs.builder().bucket(&quot;testbucket&quot;).object(&quot;test001.mp4&quot;).build();
    try(
        FilterInputStream inputStream = minioClient.getObject(getObjectArgs);
        FileOutputStream outputStream = new FileOutputStream(new File(&quot;D:\\\\develop\\\\upload\\\\1_2.mp4&quot;));
     ) {
        IOUtils.copy(inputStream,outputStream);
     } catch (Exception e) {
        e.printStackTrace();
     }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>校验文件的完整性，对文件计算出md5值，比较原始文件的md5和目标文件的md5，一致则说明完整</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>//校验文件的完整性对文件的内容进行md5
FileInputStream fileInputStream1 = new FileInputStream(new File(&quot;D:\\\\develop\\\\upload\\\\1.mp4&quot;));
String source_md5 = DigestUtils.md5Hex(fileInputStream1);
FileInputStream fileInputStream = new FileInputStream(new File(&quot;D:\\\\develop\\\\upload\\\\1a.mp4&quot;));
String local_md5 = DigestUtils.md5Hex(fileInputStream);
if(source_md5.equals(local_md5)){
    System.out.println(&quot;下载成功&quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、alioss" tabindex="-1"><a class="header-anchor" href="#三、alioss"><span>三、AliOSS</span></a></h2><h3 id="_1、什么是oss" tabindex="-1"><a class="header-anchor" href="#_1、什么是oss"><span>1、什么是OSS</span></a></h3><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1）介绍</span></a></h4><p>OSS的英文全称是Object Storage Service ，对象存储服务，是一种使用 HTTP API 存储和检索非结构化数据和元数据对象的工具。 可以理解成是一个资源托管的地方，这些资源，就是上面提到的对象。网站或者系统运营的过程中，可能会存储大量的图片、视频、音频这样的静态资源。如果是在服务器本机存储这些内容，维护成本高，不利于迁移，而且容灾效果不佳。为了解决这些问题，可以将这些静态资源托管到第三方服务中 ，而这个资源托管的服务就是对象存储服务。</p><p>如果只有存储功能，那么OSS服务就跟硬盘没啥区别了，OSS还要有外部访问的能力，这样才能把静态资源传上去（上行流量），别人才可以把这些静态资源下载下来（下行流量）。</p><p>总结来讲，<strong>OSS就是集存储与访问于一身的资源对象托管服务，用于存储静态资源，同时还提供备份、容灾等常见功能</strong>。</p><div class="hint-container tip"><p class="hint-container-title">注意点：</p><ul><li>对象，指的是非结构化的静态资源，如图片、音频、视频、日志文件等。</li><li>OSS提供的服务有存储、访问、备份、容灾等。</li><li>OSS一般指第三方云厂商提供的对象存储服务，当然也可以自己在本地机房搭建自己的对象存储，如使用Minio等搭建分布式文件存储服务，用作对象存储。</li></ul></div><h4 id="_2-oss中的相关术语" tabindex="-1"><a class="header-anchor" href="#_2-oss中的相关术语"><span>2）OSS中的相关术语</span></a></h4><p><strong>1.存储空间（Buket）</strong></p><p>存储空间是用于存储对象的容器，所有的对象都存储在某个存储空间中。</p><p><strong>2.对象/文件（Object）</strong></p><p>对象是OSS存储数据的基本单元，也被称为OSS的文件，对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的key来标识。</p><p><strong>3.地域（Region）</strong></p><p>地域表示OSS的数据中心所在的物理位置，可以根据费用、请求来源等来选择数据存储的地域。</p><p><strong>4.访问域名（Endpoint）</strong></p><p>Endpoint表示对外提供服务的访问域名，OSS以 HTTP restful API 对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名是不同的。</p><p><strong>5.访问密钥（AccessKey）</strong></p><p>简称AK，指的是访问身份验证中用到的AccessKeyId和AccessKeySecret。OSS通过使用AccessKeyId和AccessKeySecret对称加密的方法来验证某个请求发送者的身份。AccessKeyId用来标识用户，AccessKeySecret用于加密签名字符串和OSS用来验证签名字符串的密钥，AccessKeySecret必须保密。</p><h3 id="_2、使用" tabindex="-1"><a class="header-anchor" href="#_2、使用"><span>2、使用</span></a></h3><h4 id="_1-uuid" tabindex="-1"><a class="header-anchor" href="#_1-uuid"><span>1）UUID</span></a></h4><p><strong>介绍</strong></p><p>UUID全称：Universally Unique Identifier，即通用唯一识别码。</p><p>UUID是由一组32位数的16进制数字所构成，是故UUID理论上的总数为16^32 = 2^128，约等于3.4 x 10^38。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完。</p><p>UUID的标准型式包含32个16进制数字，以连字号分为五段，形式为8-4-4-4-12的32个字符，如：550e8400-e29b-41d4-a716-446655440000。</p><p><strong>UUID的作用：</strong></p><p>UUID的是让分布式系统中的所有元素都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3文件系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。</p><p><strong>UUID的组成：</strong></p><p>UUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。通常平台会提供生成的API。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字。</p><p><strong>UUID由以下几部分的组合</strong>：</p><p>当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。</p><p><strong>使用</strong></p><p>使用UUID可以生成唯一文件名</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-本地存储" tabindex="-1"><a class="header-anchor" href="#_2-本地存储"><span>2）本地存储</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> age<span class="token punctuation">,</span> <span class="token class-name">MultipartFile</span> image<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传：{},{},{}&quot;</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span> age<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//获取原始文件名</span>
        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> extname <span class="token operator">=</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//构造唯一文件名  uuid 通用唯一识别码</span>
        <span class="token class-name">String</span> newFileName <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extname<span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;新文件名：{}&quot;</span><span class="token punctuation">,</span>newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将接收到的文件存储到本地</span>
        image<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\hnu\\\\javaStudy\\\\最新版JavaWeb开发教程\\\\资料\\\\day11-SpringBootWeb案例\\\\资料\\\\03. 文件上传\\\\&quot;</span><span class="token operator">+</span>newFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-阿里云oss" tabindex="-1"><a class="header-anchor" href="#_3-阿里云oss"><span>3）阿里云OSS</span></a></h4><p><strong>依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.15.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置文件</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;aliyun.oss&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeyId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeySecret<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工具类</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSUtils</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AliOSSProperties</span> aliOSSProperties<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 实现上传图片到OSS
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> endpoint <span class="token operator">=</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> accessKeyId <span class="token operator">=</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> accessKeySecret <span class="token operator">=</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> bucketName <span class="token operator">=</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取上传的文件的输入流</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 避免文件覆盖</span>
        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//上传文件到 OSS</span>
        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//文件访问路径</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> endpoint<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;//&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;//&quot;</span> <span class="token operator">+</span> bucketName <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> endpoint<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;//&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>
        <span class="token comment">// 关闭ossClient</span>
        ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token comment">// 把上传到oss的路径返回</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用示例</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">upload</span><span class="token punctuation">(</span> <span class="token class-name">MultipartFile</span> image<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传：{}&quot;</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//阿里云OSS工具类上传</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> aliOSSUtils<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传完成，文件访问的url：{}&quot;</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><p>[1] <a href="https://blog.csdn.net/tianjiliuhen/article/details/126954490" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/tianjiliuhen/article/details/126954490</a></p>`,118);function v(g,b){return e(),s("div",null,[a("more-"),m])}const S=n(k,[["render",v],["__file","10_minio.html.vue"]]),y=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/springcloud/10_minio.html","title":"MinIO分布式文件系统","lang":"zh-CN","frontmatter":{"title":"MinIO分布式文件系统","date":"2024-07-22T00:00:00.000Z","tags":"SpringCloud","category":"SpringCloud","order":10,"icon":"/img/MinIO.svg","description":"MinIO分布式文件系统 一、分布式文件系统 1、文件系统 文件系统是负责管理和存储文件的系统软件，操作系统通过文件系统提供的接口去存取文件，用户通过操作系统访问磁盘上的文件。 下图指示了文件系统所处的位置： 在已知的操作系统中，它们分别支持多种不同的文件系统。Windows 下支持 FAT、FAT32、NTFS，Linux 支持十多种的文件系统，例如...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/springcloud/10_minio.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"MinIO分布式文件系统"}],["meta",{"property":"og:description","content":"MinIO分布式文件系统 一、分布式文件系统 1、文件系统 文件系统是负责管理和存储文件的系统软件，操作系统通过文件系统提供的接口去存取文件，用户通过操作系统访问磁盘上的文件。 下图指示了文件系统所处的位置： 在已知的操作系统中，它们分别支持多种不同的文件系统。Windows 下支持 FAT、FAT32、NTFS，Linux 支持十多种的文件系统，例如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/image/cloud/cloud41.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-09T11:07:04.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-09T11:07:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MinIO分布式文件系统\\",\\"image\\":[\\"https://mister-hope.github.io/image/cloud/cloud41.png\\",\\"https://mister-hope.github.io/image/cloud/cloud42.png\\",\\"https://mister-hope.github.io/image/cloud/cloud43.png\\",\\"https://mister-hope.github.io/image/cloud/cloud44.png\\",\\"https://mister-hope.github.io/image/cloud/cloud45.png\\",\\"https://mister-hope.github.io/image/cloud/cloud46.png\\",\\"https://mister-hope.github.io/image/cloud/cloud47.png\\",\\"https://mister-hope.github.io/image/cloud/cloud48.png\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-09T11:07:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、分布式文件系统","slug":"一、分布式文件系统","link":"#一、分布式文件系统","children":[{"level":3,"title":"1、文件系统","slug":"_1、文件系统","link":"#_1、文件系统","children":[]},{"level":3,"title":"2、分布式文件系统","slug":"_2、分布式文件系统","link":"#_2、分布式文件系统","children":[]}]},{"level":2,"title":"二、MinIO","slug":"二、minio","link":"#二、minio","children":[{"level":3,"title":"1、介绍","slug":"_1、介绍","link":"#_1、介绍","children":[]},{"level":3,"title":"2、部署","slug":"_2、部署","link":"#_2、部署","children":[]},{"level":3,"title":"3、SDK","slug":"_3、sdk","link":"#_3、sdk","children":[]}]},{"level":2,"title":"三、AliOSS","slug":"三、alioss","link":"#三、alioss","children":[{"level":3,"title":"1、什么是OSS","slug":"_1、什么是oss","link":"#_1、什么是oss","children":[]},{"level":3,"title":"2、使用","slug":"_2、使用","link":"#_2、使用","children":[]}]}],"git":{"createdTime":1723201624000,"updatedTime":1723201624000,"contributors":[{"name":"yqiChen","email":"chenyuqi1229@gmail.com","commits":1}]},"readingTime":{"minutes":13.26,"words":3979},"filePathRelative":"posts/后端/springcloud/10_minio.md","localizedDate":"2024年7月22日","excerpt":"<!--more--->\\n<h1>MinIO分布式文件系统</h1>\\n<h2>一、分布式文件系统</h2>\\n<h3>1、文件系统</h3>\\n<p>文件系统是负责管理和存储文件的系统软件，操作系统通过文件系统提供的接口去存取文件，用户通过操作系统访问磁盘上的文件。</p>\\n<p>下图指示了文件系统所处的位置：</p>\\n<figure><img src=\\"/image/cloud/cloud41.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>在已知的操作系统中，它们分别支持多种不同的文件系统。Windows 下支持 FAT、FAT32、NTFS，Linux 支持十多种的文件系统，例如：EXT2、EXT3、EXT4、NFS、NTFS等。</p>","autoDesc":true}');export{S as comp,y as data};
