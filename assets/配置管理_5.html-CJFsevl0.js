import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,b as t,o as e}from"./app-Di6OdOcP.js";const p="/image/cloud/cloud6.jpg",o="/image/cloud/cloud4.png",c="/image/cloud/cloud7.jpg",i="/image/cloud/cloud5.png",l={},u=t('<h1 id="配置管理" tabindex="-1"><a class="header-anchor" href="#配置管理"><span>配置管理</span></a></h1><h2 id="一、介绍" tabindex="-1"><a class="header-anchor" href="#一、介绍"><span>一、介绍</span></a></h2><p>到目前为止我们已经解决了微服务相关的几个问题：</p><ul><li>微服务远程调用</li><li>微服务注册、发现</li><li>微服务请求路由、负载均衡</li><li>微服务登录用户信息传递</li></ul><p>不过，现在依然还有几个问题需要解决：</p><ul><li>网关路由在配置文件中写死了，如果变更必须重启微服务</li><li>某些业务配置在配置文件中写死了，每次修改都要重启服务</li><li>每个微服务都有很多重复的配置，维护成本高</li></ul><p>这些问题都可以通过统一的<strong>配置管理器服务</strong>解决。而Nacos不仅仅具备注册中心功能，也具备配置管理的功能：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>微服务共享的配置可以统一交给Nacos保存和管理，在Nacos控制台修改配置后，Nacos会将配置变更推送给相关的微服务，并且无需重启即可生效，实现配置热更新。</p><p>网关的路由同样是配置，因此同样可以基于这个功能实现动态路由功能，无需重启网关即可修改路由配置。</p><h2 id="二、配置共享" tabindex="-1"><a class="header-anchor" href="#二、配置共享"><span>二、配置共享</span></a></h2><p>我们可以把微服务共享的配置抽取到Nacos中统一管理，这样就不需要每个微服务都重复配置了。分为两步：</p><ul><li>在Nacos中添加共享配置</li><li>微服务拉取配置</li></ul><h3 id="_1、-添加共享配置" tabindex="-1"><a class="header-anchor" href="#_1、-添加共享配置"><span>1、 添加共享配置</span></a></h3><p>我们在nacos控制台分别添加这些配置。</p><p>首先是jdbc相关配置，在<code>配置管理</code>-&gt;<code>配置列表</code>中点击<code>+</code>新建一个配置，在弹出的表单中填写信息：</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中详细的配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>hm.db.host<span class="token punctuation">:</span>192.168.150.101<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>hm.db.port<span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">}</span>/$<span class="token punctuation">{</span>hm.db.database<span class="token punctuation">}</span><span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>hm.db.un<span class="token punctuation">:</span>root<span class="token punctuation">}</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>hm.db.pw<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">}</span>
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">default-enum-type-handler</span><span class="token punctuation">:</span> com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意这里的jdbc的相关参数并没有写死</p><ul><li><code>数据库ip</code>：通过<code>\${hm.db.host:192.168.150.101}</code>配置了默认值为<code>192.168.150.101</code>，同时允许通过<code>\${hm.db.host}</code>来覆盖默认值</li><li><code>数据库端口</code>：通过<code>\${hm.db.port:3306}</code>配置了默认值为<code>3306</code>，同时允许通过<code>\${hm.db.port}</code>来覆盖默认值</li><li><code>数据库database</code>：可以通过<code>\${hm.db.database}</code>来设定，无默认值</li></ul></div><p>然后是统一的日志配置，命名为<code>shared-log.yaml</code>，配置内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.hmall</span><span class="token punctuation">:</span> debug
  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>
    <span class="token key atrule">dateformat</span><span class="token punctuation">:</span> HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">:</span>SSS
  <span class="token key atrule">file</span><span class="token punctuation">:</span>
    <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">&quot;logs/\${spring.application.name}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是统一的swagger配置，命名为<code>shared-swagger.yaml</code>，配置内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">knife4j</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">openapi</span><span class="token punctuation">:</span>
    <span class="token key atrule">title</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>hm.swagger.title<span class="token punctuation">:</span>黑马商城接口文档<span class="token punctuation">}</span>
    <span class="token key atrule">description</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>hm.swagger.description<span class="token punctuation">:</span>黑马商城接口文档<span class="token punctuation">}</span>
    <span class="token key atrule">email</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>hm.swagger.email<span class="token punctuation">:</span>zhanghuyi@itcast.cn<span class="token punctuation">}</span>
    <span class="token key atrule">concat</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>hm.swagger.concat<span class="token punctuation">:</span>虎哥<span class="token punctuation">}</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.itcast.cn
    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1.0.0
    <span class="token key atrule">group</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span>
        <span class="token key atrule">group-name</span><span class="token punctuation">:</span> default
        <span class="token key atrule">api-rule</span><span class="token punctuation">:</span> package
        <span class="token key atrule">api-rule-resources</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> $<span class="token punctuation">{</span>hm.swagger.package<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这里的swagger相关配置我们没有写死，例如：</p><ul><li><code>title</code>：接口文档标题，我们用了<code>\${hm.swagger.title}</code>来代替，将来可以有用户手动指定</li><li><code>email</code>：联系人邮箱，我们用了<code>\${hm.swagger.email:\`\`zhanghuyi@itcast.cn\`\`}</code>，默认值是<code>zhanghuyi@itcast.cn</code>，同时允许用户利用<code>\${hm.swagger.email}</code>来覆盖。</li></ul><h3 id="_2、拉取共享配置" tabindex="-1"><a class="header-anchor" href="#_2、拉取共享配置"><span>2、拉取共享配置</span></a></h3><p>接下来，我们要在微服务拉取共享配置。将拉取到的共享配置与本地的<code>application.yaml</code>配置合并，完成项目上下文的初始化。不过，需要注意的是，读取Nacos配置是SpringCloud上下文（<code>ApplicationContext</code>）初始化时处理的，发生在项目的引导阶段。然后才会初始化SpringBoot上下文，去读取<code>application.yaml</code>。</p><p>也就是说引导阶段，<code>application.yaml</code>文件尚未读取，根本不知道nacos 地址，该如何去加载nacos中的配置文件呢？</p><p>SpringCloud在初始化上下文的时候会先读取一个名为<code>bootstrap.yaml</code>(或者<code>bootstrap.properties</code>)的文件，如果我们将nacos地址配置到<code>bootstrap.yaml</code>中，那么在项目引导阶段就可以读取nacos中的配置了。</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此，微服务整合Nacos配置管理的步骤如下：</p><p>1）引入依赖：</p><p>在cart-service模块引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>  <span class="token comment">&lt;!--nacos配置管理--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--读取bootstrap文件--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）新建bootstrap.yaml</p><p>在cart-service中的resources目录新建一个bootstrap.yaml文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> cart<span class="token punctuation">-</span>service <span class="token comment"># 服务名称</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.150.101 <span class="token comment"># nacos地址</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 文件后缀名</span>
        <span class="token key atrule">shared-configs</span><span class="token punctuation">:</span> <span class="token comment"># 共享配置</span>
          <span class="token punctuation">-</span> <span class="token key atrule">dataId</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>jdbc.yaml <span class="token comment"># 共享mybatis配置</span>
          <span class="token punctuation">-</span> <span class="token key atrule">dataId</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>log.yaml <span class="token comment"># 共享日志配置</span>
          <span class="token punctuation">-</span> <span class="token key atrule">dataId</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>swagger.yaml <span class="token comment"># 共享日志配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）修改application.yaml</p><p>由于一些配置挪到了bootstrap.yaml，因此application.yaml需要修改为：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">okhttp</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启OKHttp连接池支持</span>
<span class="token key atrule">hm</span><span class="token punctuation">:</span>
  <span class="token key atrule">swagger</span><span class="token punctuation">:</span>
    <span class="token key atrule">title</span><span class="token punctuation">:</span> 购物车服务接口文档
    <span class="token key atrule">package</span><span class="token punctuation">:</span> com.hmall.cart.controller
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> hm<span class="token punctuation">-</span>cart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启服务，发现所有配置都生效了。</p><h2 id="三、配置热更新" tabindex="-1"><a class="header-anchor" href="#三、配置热更新"><span>三、配置热更新</span></a></h2><p>有很多的业务相关参数，将来可能会根据实际情况临时调整。例如购物车业务，购物车数量有一个上限，默认是10。现在这里购物车是写死的固定值，我们应该将其配置在配置文件中，方便后期修改。</p><p>但现在的问题是，即便写在配置文件中，修改了配置还是需要重新打包、重启服务才能生效。能不能不用重启，直接生效呢？</p><p>这就要用到Nacos的配置热更新能力了，分为两步：</p><ul><li>在Nacos中添加配置</li><li>在微服务读取配置</li></ul><h3 id="_1、在nacos中添加配置" tabindex="-1"><a class="header-anchor" href="#_1、在nacos中添加配置"><span>1、在Nacos中添加配置</span></a></h3><p>首先，我们在nacos中添加一个配置文件，将购物车的上限数量添加到配置中：</p><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意文件的dataId格式：</p><div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>[服务名]-[spring.active.profile].[后缀名]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><p>文件名称由三部分组成：</p><ul><li><strong><code>服务名</code></strong>：我们是购物车服务，所以是<code>cart-service</code></li><li><strong><code>spring.active.profile</code></strong>：就是spring boot中的<code>spring.active.profile</code>，可以省略，则所有profile共享该配置</li><li><strong><code>后缀名</code></strong>：例如yaml</li></ul><p>这里我们直接使用<code>cart-service.yaml</code>这个名称，则不管是dev还是local环境都可以共享该配置。</p><p>配置内容如下：</p><div class="language-YAML line-numbers-mode" data-ext="YAML" data-title="YAML"><pre class="language-YAML"><code>hm:
  cart:
    maxAmount: 1 # 购物车商品数量上限
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、配置热更新" tabindex="-1"><a class="header-anchor" href="#_2、配置热更新"><span>2、配置热更新</span></a></h3><p>接着，我们在微服务中读取配置，实现配置热更新。</p><p>在<code>cart-service</code>中新建一个属性读取类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hmall<span class="token punctuation">.</span>cart<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hm.cart&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CartProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxAmount<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，在业务中使用该属性加载类。</p><h2 id="四、动态路由" tabindex="-1"><a class="header-anchor" href="#四、动态路由"><span>四、动态路由</span></a></h2><p>网关的路由配置全部是在项目启动时由<code>org.springframework.cloud.gateway.route.CompositeRouteDefinitionLocator</code>在项目启动的时候加载，并且一经加载就会缓存到内存中的路由表内（一个Map），不会改变。也不会监听路由变更，所以，我们无法利用上节课学习的配置热更新来实现路由更新。</p><p>因此，我们必须监听Nacos的配置变更，然后手动把最新的路由更新到路由表中。这里有两个难点：</p><ul><li>如何监听Nacos配置变更？</li><li>如何把路由信息更新到路由表？</li></ul><h3 id="_1、监听nacos配置变更" tabindex="-1"><a class="header-anchor" href="#_1、监听nacos配置变更"><span>1、监听Nacos配置变更</span></a></h3><p>在Nacos官网中给出了手动监听Nacos配置变更的SDK，<a href="https://nacos.io/zh-cn/docs/sdk.html" target="_blank" rel="noopener noreferrer">官网地址</a></p><p>如果希望 Nacos 推送配置变更，可以使用 Nacos 动态监听配置接口来实现。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>public void addListener(String dataId, String group, Listener listener)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请求参数说明：</p><table><thead><tr><th style="text-align:left;"><strong>参数名</strong></th><th style="text-align:left;"><strong>参数类型</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">dataId</td><td style="text-align:left;">string</td><td style="text-align:left;">配置 ID，保证全局唯一性，只允许英文字符和 4 种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;）。不超过 256 字节。</td></tr><tr><td style="text-align:left;">group</td><td style="text-align:left;">string</td><td style="text-align:left;">配置分组，一般是默认的DEFAULT_GROUP。</td></tr><tr><td style="text-align:left;">listener</td><td style="text-align:left;">Listener</td><td style="text-align:left;">监听器，配置变更进入监听器的回调函数。</td></tr></tbody></table><p>示例代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> serverAddr <span class="token operator">=</span> <span class="token string">&quot;{serverAddr}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> dataId <span class="token operator">=</span> <span class="token string">&quot;{dataId}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> group <span class="token operator">=</span> <span class="token string">&quot;{group}&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 1.创建ConfigService，连接Nacos</span>
<span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;serverAddr&quot;</span><span class="token punctuation">,</span> serverAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ConfigService</span> configService <span class="token operator">=</span> <span class="token class-name">NacosFactory</span><span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.读取配置</span>
<span class="token class-name">String</span> content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3.添加配置监听器</span>
configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 配置变更的通知处理</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;recieve1:&quot;</span> <span class="token operator">+</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里核心的步骤有2步：</p><ul><li>创建ConfigService，目的是连接到Nacos</li><li>添加配置监听器，编写配置变更的通知处理逻辑</li></ul><p>由于我们采用了<code>spring-cloud-starter-alibaba-nacos-config</code>自动装配，因此<code>ConfigService</code>已经在<code>com.alibaba.cloud.nacos.NacosConfigAutoConfiguration</code>中自动创建好了。</p><p>因此，只要我们拿到<code>NacosConfigManager</code>就等于拿到了<code>ConfigService</code>，第一步就实现了</p><p>第二步，编写监听器。虽然官方提供的SDK是ConfigService中的addListener，不过项目第一次启动时不仅仅需要添加监听器，也需要读取配置，因此建议使用的API是这个：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>String getConfigAndSignListener(
    String dataId, // 配置文件id
    String group, // 配置组，走默认
    long timeoutMs, // 读取配置的超时时间
    Listener listener // 监听器
) throws NacosException;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既可以配置监听器，并且会根据dataId和group读取配置并返回。我们就可以在项目启动时先更新一次路由，后续随着配置变更通知到监听器，完成路由更新。</p><h3 id="_2、更新路由" tabindex="-1"><a class="header-anchor" href="#_2、更新路由"><span>2、更新路由</span></a></h3><p>更新路由要用到<code>org.springframework.cloud.gateway.route.RouteDefinitionWriter</code>这个接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> Spencer Gibb
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RouteDefinitionWriter</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
     * 更新路由到路由表，如果路由id重复，则会覆盖旧的路由
     */</span>
        <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">&gt;</span></span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
     * 根据路由id删除某个路由
     */</span>
        <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里更新的路由，也就是RouteDefinition，之前我们见过，包含下列常见字段：</p><ul><li>id：路由id</li><li>predicates：路由匹配规则</li><li>filters：路由过滤器</li><li>uri：路由目的地</li></ul><p>将来我们保存到Nacos的配置也要符合这个对象结构，将来我们以JSON来保存，格式如下：</p><div class="language-JSON line-numbers-mode" data-ext="JSON" data-title="JSON"><pre class="language-JSON"><code>{
  &quot;id&quot;: &quot;item&quot;,
  &quot;predicates&quot;: [{
    &quot;name&quot;: &quot;Path&quot;,
    &quot;args&quot;: {&quot;_genkey_0&quot;:&quot;/items/**&quot;, &quot;_genkey_1&quot;:&quot;/search/**&quot;}
  }],
  &quot;filters&quot;: [],
  &quot;uri&quot;: &quot;lb://item-service&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上JSON配置就等同于：</p><div class="language-YAML line-numbers-mode" data-ext="YAML" data-title="YAML"><pre class="language-YAML"><code>spring:
  cloud:
    gateway:
      routes:
        - id: item
          uri: lb://item-service
          predicates:
            - Path=/items/**,/search/**
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、实现动态路由" tabindex="-1"><a class="header-anchor" href="#_3、实现动态路由"><span>3、实现动态路由</span></a></h3><p>首先， 我们在网关gateway引入依赖：</p><div class="language-XML line-numbers-mode" data-ext="XML" data-title="XML"><pre class="language-XML"><code>&lt;!--统一配置管理--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--加载bootstrap--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在网关<code>gateway</code>的<code>resources</code>目录创建<code>bootstrap.yaml</code>文件，内容如下：</p><div class="language-YAML line-numbers-mode" data-ext="YAML" data-title="YAML"><pre class="language-YAML"><code>spring:
  application:
    name: gateway
  cloud:
    nacos:
      server-addr: 192.168.150.101
      config:
        file-extension: yaml
        shared-configs:
          - dataId: shared-log.yaml # 共享日志配置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，修改<code>gateway</code>的<code>resources</code>目录下的<code>application.yml</code>，把之前的路由移除，最终内容如下：</p><div class="language-YAML line-numbers-mode" data-ext="YAML" data-title="YAML"><pre class="language-YAML"><code>server:
  port: 8080 # 端口
hm:
  jwt:
    location: classpath:hmall.jks # 秘钥地址
    alias: hmall # 秘钥别名
    password: hmall123 # 秘钥文件密码
    tokenTTL: 30m # 登录有效期
  auth:
    excludePaths: # 无需登录校验的路径
      - /search/**
      - /users/login
      - /items/**
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在<code>gateway</code>中定义配置监听器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicRouteLoader</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RouteDefinitionWriter</span> writer<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">NacosConfigManager</span> nacosConfigManager<span class="token punctuation">;</span>

    <span class="token comment">// 路由配置文件的id和分组</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> dataId <span class="token operator">=</span> <span class="token string">&quot;gateway-routes.json&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> group <span class="token operator">=</span> <span class="token string">&quot;DEFAULT_GROUP&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 保存更新过的路由id</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> routeIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span> <span class="token comment">//创建好之后执行</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initRouteConfigListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.注册监听器并首次拉取配置</span>
        <span class="token class-name">String</span> configInfo <span class="token operator">=</span> nacosConfigManager<span class="token punctuation">.</span><span class="token function">getConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getConfigAndSignListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">updateConfigInfo</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.首次启动时，更新一次配置</span>
        <span class="token function">updateConfigInfo</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateConfigInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;监听到路由配置变更，{}&quot;</span><span class="token punctuation">,</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.反序列化</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">&gt;</span></span> routeDefinitions <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> <span class="token class-name">RouteDefinition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.更新前先清空旧路由</span>
        <span class="token comment">// 2.1.清除旧路由</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> routeId <span class="token operator">:</span> routeIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        routeIds<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.2.判断是否有新的路由要更新</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>routeDefinitions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 无新路由配置，直接结束</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.更新路由</span>
        routeDefinitions<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>routeDefinition <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 3.1.更新路由</span>
            writer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>routeDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 3.2.记录路由id，方便将来删除</span>
            routeIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>routeDefinition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们直接在Nacos控制台添加路由，路由文件名为<code>gateway-routes.json</code>，类型为<code>json</code>：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;predicates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Path&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;_genkey_0&quot;</span><span class="token operator">:</span><span class="token string">&quot;/items/**&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;_genkey_1&quot;</span><span class="token operator">:</span><span class="token string">&quot;/search/**&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;filters&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lb://item-service&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cart&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;predicates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Path&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;_genkey_0&quot;</span><span class="token operator">:</span><span class="token string">&quot;/carts/**&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;filters&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lb://cart-service&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;predicates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Path&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;_genkey_0&quot;</span><span class="token operator">:</span><span class="token string">&quot;/users/**&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;_genkey_1&quot;</span><span class="token operator">:</span><span class="token string">&quot;/addresses/**&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;filters&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lb://user-service&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;trade&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;predicates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Path&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;_genkey_0&quot;</span><span class="token operator">:</span><span class="token string">&quot;/orders/**&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;filters&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lb://trade-service&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pay&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;predicates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Path&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;_genkey_0&quot;</span><span class="token operator">:</span><span class="token string">&quot;/pay-orders/**&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;filters&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lb://pay-service&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,100);function r(d,k){return e(),s("div",null,[a("more-"),u])}const g=n(l,[["render",r],["__file","配置管理_5.html.vue"]]),b=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/springcloud/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86_5.html","title":"配置管理","lang":"zh-CN","frontmatter":{"title":"配置管理","date":"2024-06-25T13:54:00.000Z","tags":"SpringCloud","category":"SpringCloud","order":5,"icon":"/img/nacos.svg","description":"配置管理 一、介绍 到目前为止我们已经解决了微服务相关的几个问题： 微服务远程调用 微服务注册、发现 微服务请求路由、负载均衡 微服务登录用户信息传递 不过，现在依然还有几个问题需要解决： 网关路由在配置文件中写死了，如果变更必须重启微服务 某些业务配置在配置文件中写死了，每次修改都要重启服务 每个微服务都有很多重复的配置，维护成本高 这些问题都可以通...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/springcloud/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86_5.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"配置管理"}],["meta",{"property":"og:description","content":"配置管理 一、介绍 到目前为止我们已经解决了微服务相关的几个问题： 微服务远程调用 微服务注册、发现 微服务请求路由、负载均衡 微服务登录用户信息传递 不过，现在依然还有几个问题需要解决： 网关路由在配置文件中写死了，如果变更必须重启微服务 某些业务配置在配置文件中写死了，每次修改都要重启服务 每个微服务都有很多重复的配置，维护成本高 这些问题都可以通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/image/cloud/cloud6.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-09T11:07:04.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-06-25T13:54:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-09T11:07:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"配置管理\\",\\"image\\":[\\"https://mister-hope.github.io/image/cloud/cloud6.jpg\\",\\"https://mister-hope.github.io/image/cloud/cloud4.png\\",\\"https://mister-hope.github.io/image/cloud/cloud7.jpg\\",\\"https://mister-hope.github.io/image/cloud/cloud5.png\\"],\\"datePublished\\":\\"2024-06-25T13:54:00.000Z\\",\\"dateModified\\":\\"2024-08-09T11:07:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、介绍","slug":"一、介绍","link":"#一、介绍","children":[]},{"level":2,"title":"二、配置共享","slug":"二、配置共享","link":"#二、配置共享","children":[{"level":3,"title":"1、 添加共享配置","slug":"_1、-添加共享配置","link":"#_1、-添加共享配置","children":[]},{"level":3,"title":"2、拉取共享配置","slug":"_2、拉取共享配置","link":"#_2、拉取共享配置","children":[]}]},{"level":2,"title":"三、配置热更新","slug":"三、配置热更新","link":"#三、配置热更新","children":[{"level":3,"title":"1、在Nacos中添加配置","slug":"_1、在nacos中添加配置","link":"#_1、在nacos中添加配置","children":[]},{"level":3,"title":"2、配置热更新","slug":"_2、配置热更新","link":"#_2、配置热更新","children":[]}]},{"level":2,"title":"四、动态路由","slug":"四、动态路由","link":"#四、动态路由","children":[{"level":3,"title":"1、监听Nacos配置变更","slug":"_1、监听nacos配置变更","link":"#_1、监听nacos配置变更","children":[]},{"level":3,"title":"2、更新路由","slug":"_2、更新路由","link":"#_2、更新路由","children":[]},{"level":3,"title":"3、实现动态路由","slug":"_3、实现动态路由","link":"#_3、实现动态路由","children":[]}]}],"git":{"createdTime":1723201624000,"updatedTime":1723201624000,"contributors":[{"name":"yqiChen","email":"chenyuqi1229@gmail.com","commits":1}]},"readingTime":{"minutes":9.88,"words":2964},"filePathRelative":"posts/后端/springcloud/配置管理_5.md","localizedDate":"2024年6月25日","excerpt":"<!--more--->\\n<h1>配置管理</h1>\\n<h2>一、介绍</h2>\\n<p>到目前为止我们已经解决了微服务相关的几个问题：</p>\\n<ul>\\n<li>微服务远程调用</li>\\n<li>微服务注册、发现</li>\\n<li>微服务请求路由、负载均衡</li>\\n<li>微服务登录用户信息传递</li>\\n</ul>\\n<p>不过，现在依然还有几个问题需要解决：</p>\\n<ul>\\n<li>网关路由在配置文件中写死了，如果变更必须重启微服务</li>\\n<li>某些业务配置在配置文件中写死了，每次修改都要重启服务</li>\\n<li>每个微服务都有很多重复的配置，维护成本高</li>\\n</ul>\\n<p>这些问题都可以通过统一的<strong>配置管理器服务</strong>解决。而Nacos不仅仅具备注册中心功能，也具备配置管理的功能：</p>","autoDesc":true}');export{g as comp,b as data};
