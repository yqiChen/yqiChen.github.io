import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,b as e,o as t}from"./app-Di6OdOcP.js";const l="/image/cloud/cloud17.png",i="/image/cloud/cloud18.png",o="/image/cloud/cloud19.png",p="/image/cloud/cloud20.png",c={},d=e('<h1 id="分布式事务" tabindex="-1"><a class="header-anchor" href="#分布式事务"><span>分布式事务</span></a></h1><h2 id="一、介绍" tabindex="-1"><a class="header-anchor" href="#一、介绍"><span>一、介绍</span></a></h2><p>由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务：</p><ul><li>交易服务：下单事务</li><li>购物车服务：清理购物车事务</li><li>库存服务：扣减库存事务</li></ul><p>整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为<strong>分支事务</strong>。多个有关联的分支事务一起就组成了<strong>全局事务</strong>。我们必须保证整个全局事务同时成功或失败。</p><p>我们知道每一个分支事务就是传统的<strong>单体事务</strong>，都可以满足ACID特性，但全局事务跨越多个服务、多个数据库，是否还能满足呢？</p><ul><li>参与事务的多个子业务在不同的微服务，跨越了不同的数据库。虽然每个单独的业务都能在本地遵循ACID，但是它们互相之间没有感知，不知道有人失败了，无法保证最终结果的统一，也就无法遵循ACID的事务特性了。这就是分布式事务问题.</li></ul><div class="hint-container tip"><p class="hint-container-title">出现以下情况之一就可能产生分布式事务问题：</p><ul><li>业务跨多个服务实现</li><li>业务跨多个数据源实现</li></ul></div><h2 id="二、seata" tabindex="-1"><a class="header-anchor" href="#二、seata"><span>二、Seata</span></a></h2><p>解决分布式事务的方案有很多，但实现起来都比较复杂，因此我们一般会使用开源的框架来解决分布式事务问题。在众多的开源分布式事务框架中，功能最完善、使用最多的就是阿里巴巴在2019年开源的Seata了，<a href="https://seata.apache.org/zh-cn/docs/overview/what-is-seata/" target="_blank" rel="noopener noreferrer">官方文档</a></p><p>解决分布式事务的思想非常简单：</p><p>就是找一个统一的<strong>事务协调者</strong>，与多个分支事务通信，检测每个分支事务的执行状态，保证全局事务下的每一个分支事务同时成功或失败即可。大多数的分布式事务框架都是基于这个理论来实现的。</p><p>Seata也不例外，在Seata的事务管理中有三个重要的角色：</p><ul><li><strong>TC (Transaction Coordinator) - 事务协调者：</strong> 维护全局和分支事务的状态，协调全局事务提交或回滚。</li><li><strong>TM (Transaction Manager) - 事务管理器：</strong> 定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li><strong>RM (Resource Manager) - 资源管理器：</strong> 管理分支事务，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul><p>Seata的工作架构如图所示：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>其中，<strong>TM</strong>和<strong>RM</strong>可以理解为Seata的客户端部分，引入到参与事务的微服务依赖中即可。将来<strong>TM</strong>和<strong>RM</strong>就会协助微服务，实现本地分支事务与<strong>TC</strong>之间交互，实现事务的提交或回滚。</p></li><li><p>而<strong>TC</strong>服务则是事务协调中心，是一个独立的微服务，需要单独部署。</p></li></ul><h2 id="三、部署tc服务" tabindex="-1"><a class="header-anchor" href="#三、部署tc服务"><span>三、部署TC服务</span></a></h2><p>使用docker部署seata,可参考<a href="https://seata.apache.org/zh-cn/docs/ops/deploy-by-docker-142/" target="_blank" rel="noopener noreferrer">官网</a></p><h3 id="_1、准备数据库表" tabindex="-1"><a class="header-anchor" href="#_1、准备数据库表"><span>1、准备数据库表</span></a></h3><p>Seata支持多种存储模式，但考虑到持久化的需要，我们一般选择基于数据库存储。使用<a href="https://github.com/apache/incubator-seata/blob/develop/script/server/db/mysql.sql" target="_blank" rel="noopener noreferrer">MySQL脚本</a>，初始化 Seata TC Server 的 db 数据库。</p><h3 id="_2、准备配置文件" tabindex="-1"><a class="header-anchor" href="#_2、准备配置文件"><span>2、准备配置文件</span></a></h3><p>准备一个seata目录，其中包含了seata运行时所需要的配置文件：</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将整个seata文件夹拷贝到虚拟机的<code>/root</code>目录.</p><h3 id="_3、docker部署" tabindex="-1"><a class="header-anchor" href="#_3、docker部署"><span>3、Docker部署</span></a></h3><p>需要注意，要确保nacos、mysql都在hm-net网络中。如果某个容器不再hm-net网络，可以参考下面的命令将某容器加入指定网络：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> network connect <span class="token punctuation">[</span>网络名<span class="token punctuation">]</span> <span class="token punctuation">[</span>容器名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在虚拟机的<code>/root</code>目录执行下面的命令：</p><div class="language-Shell line-numbers-mode" data-ext="Shell" data-title="Shell"><pre class="language-Shell"><code>docker run --name seata \\
-p 8099:8099 \\
-p 7099:7099 \\
-e SEATA_IP=192.168.175.129 \\
-v ./seata:/seata-server/resources \\
--privileged=true \\
--network hm-net \\
-d \\
seataio/seata-server:1.5.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、微服务集成seata" tabindex="-1"><a class="header-anchor" href="#四、微服务集成seata"><span>四、微服务集成Seata</span></a></h2><p>参与分布式事务的每一个微服务都需要集成Seata，我们以<code>trade-service</code>为例。</p><h3 id="_1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖"><span>1、引入依赖</span></a></h3><p>为了方便各个微服务集成seata，我们需要把seata配置共享到nacos，因此<code>trade-service</code>模块不仅仅要引入seata依赖，还要引入nacos依赖:</p><div class="language-XML line-numbers-mode" data-ext="XML" data-title="XML"><pre class="language-XML"><code>	&lt;!--统一配置管理--&gt;
  &lt;dependency&gt;
      &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;!--读取bootstrap文件--&gt;
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;!--seata--&gt;
  &lt;dependency&gt;
      &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;
  &lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、改造配置" tabindex="-1"><a class="header-anchor" href="#_2、改造配置"><span>2、改造配置</span></a></h3><p>首先在nacos上添加一个共享的seata配置，命名为<code>shared-seata.yaml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">seata</span><span class="token punctuation">:</span>
  <span class="token key atrule">registry</span><span class="token punctuation">:</span> <span class="token comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos <span class="token comment"># 注册中心类型 nacos</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.175.129<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos地址</span>
      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span> <span class="token comment"># namespace，默认为空</span>
      <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP <span class="token comment"># 分组，默认是DEFAULT_GROUP</span>
      <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>server <span class="token comment"># seata服务名称</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos
      <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos
  <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> hmall <span class="token comment"># 事务组名称</span>
  <span class="token key atrule">service</span><span class="token punctuation">:</span>
    <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span> <span class="token comment"># 事务组与tc集群的映射关系</span>
      <span class="token key atrule">hmall</span><span class="token punctuation">:</span> <span class="token string">&quot;default&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，改造<code>trade-service</code>模块，添加<code>bootstrap.yaml</code>：</p><p>内容如下:</p><div class="language-YAML line-numbers-mode" data-ext="YAML" data-title="YAML"><pre class="language-YAML"><code>spring:
  application:
    name: trade-service # 服务名称
  profiles:
    active: dev
  cloud:
    nacos:
      server-addr: 192.168.150.101 # nacos地址
      config:
        file-extension: yaml # 文件后缀名
        shared-configs: # 共享配置
          - dataId: shared-jdbc.yaml # 共享mybatis配置
          - dataId: shared-log.yaml # 共享日志配置
          - dataId: shared-swagger.yaml # 共享日志配置
          - dataId: shared-seata.yaml # 共享seata配置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后改造application.yaml文件，内容如下：</p><div class="language-YAML line-numbers-mode" data-ext="YAML" data-title="YAML"><pre class="language-YAML"><code>server:
  port: 8085
feign:
  okhttp:
    enabled: true # 开启OKHttp连接池支持
  sentinel:
    enabled: true # 开启Feign对Sentinel的整合
hm:
  swagger:
    title: 交易服务接口文档
    package: com.hmall.trade.controller
  db:
    database: hm-trade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考上述办法分别改造<code>hm-cart</code>和<code>hm-item</code>两个微服务模块。</p><h3 id="_3、添加数据库表" tabindex="-1"><a class="header-anchor" href="#_3、添加数据库表"><span>3、添加数据库表</span></a></h3><p>（AT模式下）seata的客户端在解决分布式事务的时候需要记录一些中间数据，保存在数据库中。因此我们要先准备一个这样的表,<a href="https://github.com/apache/incubator-seata/blob/develop/script/client/at/db/mysql.sql" target="_blank" rel="noopener noreferrer">参考</a>。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>undo_log<span class="token punctuation">\`</span></span>
<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">\`</span>branch_id<span class="token punctuation">\`</span></span>     <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;branch transaction id&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>xid<span class="token punctuation">\`</span></span>           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;global transaction id&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>context<span class="token punctuation">\`</span></span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;undo_log context,such as serialization&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>rollback_info<span class="token punctuation">\`</span></span> <span class="token keyword">LONGBLOB</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;rollback info&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_status<span class="token punctuation">\`</span></span>    <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;0:normal status,1:defense status&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_created<span class="token punctuation">\`</span></span>   <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;create datetime&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_modified<span class="token punctuation">\`</span></span>  <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;modify datetime&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>ux_undo_log<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>xid<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>branch_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">&#39;AT transaction mode undo table&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>undo_log<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>ix_log_created<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>log_created<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此为止，微服务整合的工作就完成了。</p><h2 id="五、xa模式" tabindex="-1"><a class="header-anchor" href="#五、xa模式"><span>五、XA模式</span></a></h2><h3 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍"><span>1、介绍</span></a></h3><p>Seata支持四种不同的分布式事务解决方案：</p><ul><li><strong>XA</strong></li><li><strong>TCC</strong></li><li><strong>AT</strong></li><li><strong>SAGA</strong></li></ul><p><code>XA</code> 规范 是<code> X/Open</code> 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的<code>TM</code>与局部的<code>RM</code>之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p><h3 id="_2、seata的xa模型" tabindex="-1"><a class="header-anchor" href="#_2、seata的xa模型"><span>2、Seata的XA模型</span></a></h3><p>Seata对原始的XA模式做了简单的封装和改造，以适应自己的事务模型，基本架构如图：</p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>RM</code>一阶段的工作：</p><ol><li>注册分支事务到<code>TC</code></li><li>执行分支业务sql但<strong>不提交</strong></li><li>报告执行状态到<code>TC</code></li></ol><p><code>TC</code>二阶段的工作：</p><ol><li><code>TC</code>检测各分支事务执行状态</li><li>如果都成功，通知所有RM提交事务</li><li>如果有失败，通知所有RM回滚事务</li></ol><p><code>RM</code>二阶段的工作：</p><ul><li>接收<code>TC</code>指令，提交或回滚事务</li></ul><div class="hint-container tip"><p class="hint-container-title">XA模式优缺点</p><ul><li><p>优点</p><ul><li>事务的强一致性，满足ACID原则</li><li>常用数据库都支持，实现简单，并且没有代码侵入</li></ul></li><li><p>缺点</p><ul><li>因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</li><li>依赖关系型数据库实现事务</li></ul></li></ul></div><h3 id="_3、实现" tabindex="-1"><a class="header-anchor" href="#_3、实现"><span>3、实现</span></a></h3><p>首先，我们要在配置文件中指定要采用的分布式事务模式。我们可以在Nacos中的共享shared-seata.yaml配置文件中设置</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">seata</span><span class="token punctuation">:</span>
  <span class="token key atrule">data-source-proxy-mode</span><span class="token punctuation">:</span> XA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，我们要利用<code>@GlobalTransactional</code>标记分布式事务的入口方法:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@GlobalTransactional</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderFormDTO</span> orderFormDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、at模式-默认" tabindex="-1"><a class="header-anchor" href="#六、at模式-默认"><span>六、AT模式(默认)</span></a></h2><p><code>AT</code>模式同样是分阶段提交的事务模型，不过<strong>缺弥补了<code>XA</code>模型中资源锁定周期过长的缺陷。</strong></p><h3 id="_1、seata的at模型" tabindex="-1"><a class="header-anchor" href="#_1、seata的at模型"><span>1、Seata的AT模型</span></a></h3><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>阶段一<code>RM</code>的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul><p>阶段二提交时<code>RM</code>的工作：</p><ul><li>删除undo-log即可</li></ul><p>阶段二回滚时<code>RM</code>的工作：</p><ul><li>根据undo-log恢复数据到更新前</li></ul><div class="hint-container info"><p class="hint-container-title">AT与XA的区别</p><ul><li><code>XA</code>模式一阶段不提交事务，锁定资源；<code>AT</code>模式一阶段直接提交，不锁定资源。</li><li><code>XA</code>模式依赖数据库机制实现回滚；<code>AT</code>模式利用数据快照实现数据回滚。</li><li><code>XA</code>模式强一致；<code>AT</code>模式最终一致</li></ul></div><p>可见，AT模式使用起来更加简单，无业务侵入，性能更好。因此企业90%的分布式事务都可以用AT模式来解决。</p><h3 id="_2、实现" tabindex="-1"><a class="header-anchor" href="#_2、实现"><span>2、实现</span></a></h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>使用AT模型需要为<strong>每个</strong>微服务的数据库添加<code>undo_log</code>表</p></div><p>直接在Nacos中的共享shared-seata.yaml配置文件中设置</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">seata</span><span class="token punctuation">:</span>
  <span class="token key atrule">data-source-proxy-mode</span><span class="token punctuation">:</span> AT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，我们和AT一样要利用<code>@GlobalTransactional</code>标记分布式事务的入口方法。</p>`,85);function r(u,k){return t(),n("div",null,[s("more-"),d])}const g=a(c,[["render",r],["__file","7_分布式事务.html.vue"]]),h=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/springcloud/7_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html","title":"分布式事务","lang":"zh-CN","frontmatter":{"title":"分布式事务","date":"2024-06-26T16:07:00.000Z","tags":"SpringCloud","category":"SpringCloud","order":7,"icon":"/img/seata.svg","description":"分布式事务 一、介绍 由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务： 交易服务：下单事务 购物车服务：清理购物车事务 库存服务：扣减库存事务 整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为分支事务。多个有关联的分支事务...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/springcloud/7_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"分布式事务"}],["meta",{"property":"og:description","content":"分布式事务 一、介绍 由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务： 交易服务：下单事务 购物车服务：清理购物车事务 库存服务：扣减库存事务 整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为分支事务。多个有关联的分支事务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/image/cloud/cloud17.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-09T11:07:04.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-06-26T16:07:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-09T11:07:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务\\",\\"image\\":[\\"https://mister-hope.github.io/image/cloud/cloud17.png\\",\\"https://mister-hope.github.io/image/cloud/cloud18.png\\",\\"https://mister-hope.github.io/image/cloud/cloud19.png\\",\\"https://mister-hope.github.io/image/cloud/cloud20.png\\"],\\"datePublished\\":\\"2024-06-26T16:07:00.000Z\\",\\"dateModified\\":\\"2024-08-09T11:07:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、介绍","slug":"一、介绍","link":"#一、介绍","children":[]},{"level":2,"title":"二、Seata","slug":"二、seata","link":"#二、seata","children":[]},{"level":2,"title":"三、部署TC服务","slug":"三、部署tc服务","link":"#三、部署tc服务","children":[{"level":3,"title":"1、准备数据库表","slug":"_1、准备数据库表","link":"#_1、准备数据库表","children":[]},{"level":3,"title":"2、准备配置文件","slug":"_2、准备配置文件","link":"#_2、准备配置文件","children":[]},{"level":3,"title":"3、Docker部署","slug":"_3、docker部署","link":"#_3、docker部署","children":[]}]},{"level":2,"title":"四、微服务集成Seata","slug":"四、微服务集成seata","link":"#四、微服务集成seata","children":[{"level":3,"title":"1、引入依赖","slug":"_1、引入依赖","link":"#_1、引入依赖","children":[]},{"level":3,"title":"2、改造配置","slug":"_2、改造配置","link":"#_2、改造配置","children":[]},{"level":3,"title":"3、添加数据库表","slug":"_3、添加数据库表","link":"#_3、添加数据库表","children":[]}]},{"level":2,"title":"五、XA模式","slug":"五、xa模式","link":"#五、xa模式","children":[{"level":3,"title":"1、介绍","slug":"_1、介绍","link":"#_1、介绍","children":[]},{"level":3,"title":"2、Seata的XA模型","slug":"_2、seata的xa模型","link":"#_2、seata的xa模型","children":[]},{"level":3,"title":"3、实现","slug":"_3、实现","link":"#_3、实现","children":[]}]},{"level":2,"title":"六、AT模式(默认)","slug":"六、at模式-默认","link":"#六、at模式-默认","children":[{"level":3,"title":"1、Seata的AT模型","slug":"_1、seata的at模型","link":"#_1、seata的at模型","children":[]},{"level":3,"title":"2、实现","slug":"_2、实现","link":"#_2、实现","children":[]}]}],"git":{"createdTime":1723201624000,"updatedTime":1723201624000,"contributors":[{"name":"yqiChen","email":"chenyuqi1229@gmail.com","commits":1}]},"readingTime":{"minutes":7.99,"words":2398},"filePathRelative":"posts/后端/springcloud/7_分布式事务.md","localizedDate":"2024年6月26日","excerpt":"<!--more--->\\n<h1>分布式事务</h1>\\n<h2>一、介绍</h2>\\n<p>由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务：</p>\\n<ul>\\n<li>交易服务：下单事务</li>\\n<li>购物车服务：清理购物车事务</li>\\n<li>库存服务：扣减库存事务</li>\\n</ul>\\n<p>整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为<strong>分支事务</strong>。多个有关联的分支事务一起就组成了<strong>全局事务</strong>。我们必须保证整个全局事务同时成功或失败。</p>","autoDesc":true}');export{g as comp,h as data};
