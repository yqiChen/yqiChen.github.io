import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,b as t,o as e}from"./app-jl_0F-Zm.js";const p={},c=t(`<h1 id="springcache-缓存" tabindex="-1"><a class="header-anchor" href="#springcache-缓存"><span>SpringCache 缓存</span></a></h1><h2 id="一、redis缓存" tabindex="-1"><a class="header-anchor" href="#一、redis缓存"><span>一、Redis缓存</span></a></h2><p>在增删改的时候清理缓存，查找的时候添加</p><h3 id="_1、清理缓存" tabindex="-1"><a class="header-anchor" href="#_1、清理缓存"><span>1、清理缓存</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> 	<span class="token doc-comment comment">/**
     * 清理缓存数据
     * <span class="token keyword">@param</span> <span class="token parameter">pattern</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cleancache</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;clean redis cache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span> keys <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 新增菜品
     * <span class="token keyword">@param</span> <span class="token parameter">dishDTO</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;新增菜品&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">DishDTO</span> dishDTO<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;新增菜品：{}&quot;</span><span class="token punctuation">,</span>dishDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>

        dishService<span class="token punctuation">.</span><span class="token function">saveWithFlavor</span><span class="token punctuation">(</span>dishDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//清理缓存数据</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;dish_&quot;</span> <span class="token operator">+</span> dishDTO<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cleancache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、添加缓存" tabindex="-1"><a class="header-anchor" href="#_2、添加缓存"><span>2、添加缓存</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 根据分类id查询菜品
     *
     * <span class="token keyword">@param</span> <span class="token parameter">categoryId</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;根据分类id查询菜品&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">DishVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Long</span> categoryId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//构造redis中的key   规则： dish_分类id</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;dish_&quot;</span> <span class="token operator">+</span> categoryId<span class="token punctuation">;</span>
        <span class="token comment">//1、查询redis中是否存在菜品数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishVO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishVO</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//2、如果存在，直接返回，无需查询数据库</span>
            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Dish</span> dish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dish<span class="token punctuation">.</span><span class="token function">setCategoryId</span><span class="token punctuation">(</span>categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dish<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">StatusConstant</span><span class="token punctuation">.</span><span class="token constant">ENABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询起售中的菜品</span>

        <span class="token comment">//3、如果不存在，查询数据库，将查询到的数据放入redis中</span>
        list <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">listWithFlavor</span><span class="token punctuation">(</span>dish<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、使用springcache" tabindex="-1"><a class="header-anchor" href="#二、使用springcache"><span>二、使用SpringCache</span></a></h2><p>它利用了AOP，实现了基于注解的缓存功能，并且进行了合理的抽象，业务代码不用关心底层是使用了什么缓存框架，只需要简单地加一个注解，就能实现缓存功能了。而且Spring Cache也提供了很多默认的配置，用户可以3秒钟就使用上一个很不错的缓存功能。</p><h3 id="_1、使用方法" tabindex="-1"><a class="header-anchor" href="#_1、使用方法"><span>1、使用方法</span></a></h3><h4 id="_1-添加依赖" tabindex="-1"><a class="header-anchor" href="#_1-添加依赖"><span>1）添加依赖</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-开启缓存" tabindex="-1"><a class="header-anchor" href="#_2-开启缓存"><span>2)开启缓存</span></a></h4><p>在启动类加上<code>@EnableCaching</code>注解即可开启使用缓存。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CachingApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、常见注释" tabindex="-1"><a class="header-anchor" href="#_2、常见注释"><span>2、常见注释</span></a></h3><p>Spring Cache有几个常用注解，分别为<code>@Cacheable、@CachePut、@CacheEvict、@Caching、@CacheConfig</code>。除了最后一个<code>CacheConfig</code>外，其余四个都可以用在类上或者方法级别上，<code>如果用在类上，就是对该类的所有public方法生效</code>，下面分别介绍一下这几个注解。</p><p><strong>@Cacheable</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>@Cacheble</code>注解表示这个方法有了缓存的功能，方法的返回值会被缓存下来，下一次调用该方法前，会去检查是否缓存中已经有值，<code>如果有就直接返回，不调用方法</code>。如果没有，就调用方法，然后把结果缓存起来。这个注解一般用在查询方法上。</p></div><ul><li><p><code>cacheNames</code>：用于指定缓存存储的集合名。由于Spring 4中新增了<code>@CacheConfig</code>，因此在<code>Spring 3</code>中原本必须有的<code>value</code>属性，也成为非必需项了</p></li><li><p><code>key</code>：和<code>cacheNames</code>共同组成一个<code>key</code>，非必需，缺省按照函数的所有参数组合作为<code>key</code>值，若自己配置需使用<code>SpEL</code>表达式，比如：<code>@Cacheable(key = &quot;#p0&quot;)</code>：使用函数第一个参数作为缓存的<code>key</code>值，更多关于SpEL表达式的详细内容可参考<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https%3A%2F%2Fdocs.spring.io%2Fspring-framework%2Fdocs%2Fcurrent%2Freference%2Fhtml%2Fintegration.html%23cache&amp;source=article&amp;objectId=1914228" target="_blank" rel="noopener noreferrer">官方文档</a></p></li><li><p><code>condition</code>：缓存对象的条件，<code>非必需</code>，也需使用<code>SpEL</code>表达式，只有满足表达式条件的内容才会被缓存，比如：<code>@Cacheable(key = &quot;#p0&quot;, condition = &quot;#p0.length() &lt; 3&quot;)</code>，表示只有当第一个参数的长度小于3的时候才会被缓存，若做此配置上面的<code>AAA</code>用户就不会被缓存，读者可自行实验尝试，在函数调用前进行判断，因此result这种spel里面进行判断时，永远为null.</p></li></ul><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;根据分类id查询套餐&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;setmealCache&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#categoryId&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Long</span> categoryId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Setmeal</span> setmeal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Setmeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmeal<span class="token punctuation">.</span><span class="token function">setCategoryId</span><span class="token punctuation">(</span>categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmeal<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">StatusConstant</span><span class="token punctuation">.</span><span class="token constant">ENABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@CachePut</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>@CachePut</code> 的作用 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 <code>@Cacheable</code> 不同的是，它每次都会触发真实方法的调用</p></div><p><strong>@CacheEvict</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>@CachEvict</code> 的作用 主要针对方法配置，能够根据一定的条件对缓存进行清空</p><p>一般用在更新或者删除的方法上。</p></div><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@PostMapping</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;新增套餐&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;setmealCache&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#setmealDTO.categoryId&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SetmealDTO</span> setmealDTO<span class="token punctuation">)</span><span class="token punctuation">{</span>
        setmealService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>setmealDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@Caching</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Java注解的机制决定了，一个方法上只能有一个相同的注解生效。那有时候可能一个方法会操作多个缓存（这个在删除缓存操作中比较常见，在添加操作中不太常见）。</p></div><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>put <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.email&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@CacheConfig</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>前面提到的四个注解，都是<code>Spring Cache</code>常用的注解。每个注解都有很多可以配置的属性。</p><p>但这几个注解通常都是作用在方法上的，而有些配置可能又是一个类通用的，这种情况就可以使用<code>@CacheConfig</code>了，它是一个类级别的注解，可以在类级别上配置<code>cacheNames、keyGenerator、cacheManager、cacheResolver</code>等。</p></div><p>例如:</p><p>所有的<code>@Cacheable（）</code>里面都有一个<code>value＝“xxx”</code>的属性，这显然如果方法多了，写起来也是挺累的，如果可以一次性声明完 那就省事了， 所以，有了<code>@CacheConfig</code>这个配置，<code>@CacheConfig is a class-level annotation that allows to share the cache names</code>，如果你在你的方法写别的名字，那么依然以方法的名字为准。</p><p><strong>@CacheConfig是一个类级别的注解。</strong></p><h3 id="_3、自定义缓存注解" tabindex="-1"><a class="header-anchor" href="#_3、自定义缓存注解"><span>3、自定义缓存注解</span></a></h3><p>比如之前的那个<code>@Caching</code>组合，会让方法上的注解显得整个代码比较乱，此时可以使用自定义注解把这些注解组合到一个注解中，如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>put <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.email&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">UserSaveCache</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们在方法上使用如下代码即可，整个代码显得比较干净。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@UserSaveCache</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、springcache原理" tabindex="-1"><a class="header-anchor" href="#三、springcache原理"><span>三、SpringCache原理</span></a></h2><p><code>Spring Cache</code>使用的是一个叫做<code>CacheInterceptor</code>的拦截器。我们如果加了缓存相应的注解，就会走到这个拦截器上。这个拦截器继承了<code>CacheAspectSupport</code>类，会执行这个类的<code>execute</code>方法，这个方法就是我们要分析的核心方法了。</p><p><strong>@Cacheable的sync</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">CacheOperationInvoker</span> invoker<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">CacheOperationContexts</span> contexts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">isSynchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//判断是否是同步</span>
            <span class="token class-name">CacheOperationContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CacheOperationContext</span><span class="token punctuation">)</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheableOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//判断Condition是否满足条件，如果不满足，就执行方法,因此condition是在方法执行前进行判断的</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isConditionPassing</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">CacheOperationExpressionEvaluator</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invokeOperation</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
			<span class="token comment">//尝试获取key</span>
            <span class="token class-name">Object</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">CacheOperationExpressionEvaluator</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//生成一个cache对象</span>
            <span class="token class-name">Cache</span> cache <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cache</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wrapCacheValue</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSynchronizedGet</span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Cache<span class="token punctuation">.</span>ValueRetrievalException</span> var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Cache<span class="token punctuation">.</span>ValueRetrievalException</span> ex <span class="token operator">=</span> var10<span class="token punctuation">;</span>
                <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">rethrowRuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processCacheEvicts</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheEvictOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">CacheOperationExpressionEvaluator</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Cache<span class="token punctuation">.</span>ValueWrapper</span> cacheHit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findCachedItem</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheableOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CachePutRequest</span><span class="token punctuation">&gt;</span></span> cachePutRequests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheHit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">collectPutRequests</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheableOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CacheOperationExpressionEvaluator</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT</span><span class="token punctuation">,</span> cachePutRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Object</span> cacheValue<span class="token punctuation">;</span>
        <span class="token class-name">Object</span> returnValue<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheHit <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasCachePut</span><span class="token punctuation">(</span>contexts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cacheValue <span class="token operator">=</span> cacheHit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            returnValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wrapCacheValue</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> cacheValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            returnValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invokeOperation</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cacheValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unwrapReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">collectPutRequests</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CachePutOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cacheValue<span class="token punctuation">,</span> cachePutRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span> var8 <span class="token operator">=</span> cachePutRequests<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var8<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CachePutRequest</span> cachePutRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CachePutRequest</span><span class="token punctuation">)</span>var8<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cachePutRequest<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>cacheValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processCacheEvicts</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheEvictOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> cacheValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着往下看，可以看到我们得到了一个<code>Cache</code>。这个<code>Cache</code>是在我们调用<code>CacheAspectSupport</code>的<code>execute</code>方法的时候，会<code>new</code>一个<code>CacheOperationContext</code>。在这个<code>Context</code>的构造方法里，会用<code>cacheResolver</code>去解析注解中的<code>Cache</code>，生成<code>Cache</code>对象。</p><p>默认的<code>cacheResolver</code>是<code>SimpleCacheResolver</code>，它从<code>CacheOperation</code>中取得配置的<code>cacheNames</code>，然后用<code>cacheManager</code>去<code>get</code>一个<code>Cache</code>。这里的<code>cacheManager</code>是用于管理<code>Cache</code>的一个容器，默认的<code>cacheManager</code>是<code>ConcurrentMapCacheManager</code>。听名字就知道是基于<code>ConcurrentMap</code>来做的了，底层是<code>ConcurrentHashMap</code>。</p><p>那这里的<code>Cache</code>是什么东西呢？<code>Cache</code>就对“缓存容器”的一个抽象，<code>包含了缓存会用到的get、put、evict、putIfAbsent等方法。</code></p><p>不同的<code>cacheNames</code>会对应不同的<code>Cache</code>对象，比如我们可以在一个方法上定义两个<code>cacheNames</code>，虽然也可以用<code>value</code>，它是<code>cacheNames</code>的别名，但如果有多个配置的时候，更推荐用<code>cacheNames</code>，因为这样具有更好的可读性。</p><p>默认的Cache是ConcurrentMapCache，它也是基于ConcurrentHashMap的。</p>`,53);function o(l,i){return e(),s("div",null,[a("more-"),c])}const r=n(p,[["render",o],["__file","缓存.html.vue"]]),d=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/springboot/%E7%BC%93%E5%AD%98.html","title":"SpringCache缓存","lang":"zh-CN","frontmatter":{"title":"SpringCache缓存","tags":"code","date":"2024-06-11T15:24:00.000Z","category":["Redis","SpringBoot"],"order":5,"icon":"/img/spring.svg","description":"SpringCache 缓存 一、Redis缓存 在增删改的时候清理缓存，查找的时候添加 1、清理缓存 例如： 2、添加缓存 二、使用SpringCache 它利用了AOP，实现了基于注解的缓存功能，并且进行了合理的抽象，业务代码不用关心底层是使用了什么缓存框架，只需要简单地加一个注解，就能实现缓存功能了。而且Spring Cache也提供了很多默认的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/springboot/%E7%BC%93%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"SpringCache缓存"}],["meta",{"property":"og:description","content":"SpringCache 缓存 一、Redis缓存 在增删改的时候清理缓存，查找的时候添加 1、清理缓存 例如： 2、添加缓存 二、使用SpringCache 它利用了AOP，实现了基于注解的缓存功能，并且进行了合理的抽象，业务代码不用关心底层是使用了什么缓存框架，只需要简单地加一个注解，就能实现缓存功能了。而且Spring Cache也提供了很多默认的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-09T11:07:04.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-06-11T15:24:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-09T11:07:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringCache缓存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-11T15:24:00.000Z\\",\\"dateModified\\":\\"2024-08-09T11:07:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、Redis缓存","slug":"一、redis缓存","link":"#一、redis缓存","children":[{"level":3,"title":"1、清理缓存","slug":"_1、清理缓存","link":"#_1、清理缓存","children":[]},{"level":3,"title":"2、添加缓存","slug":"_2、添加缓存","link":"#_2、添加缓存","children":[]}]},{"level":2,"title":"二、使用SpringCache","slug":"二、使用springcache","link":"#二、使用springcache","children":[{"level":3,"title":"1、使用方法","slug":"_1、使用方法","link":"#_1、使用方法","children":[]},{"level":3,"title":"2、常见注释","slug":"_2、常见注释","link":"#_2、常见注释","children":[]},{"level":3,"title":"3、自定义缓存注解","slug":"_3、自定义缓存注解","link":"#_3、自定义缓存注解","children":[]}]},{"level":2,"title":"三、SpringCache原理","slug":"三、springcache原理","link":"#三、springcache原理","children":[]}],"git":{"createdTime":1723201624000,"updatedTime":1723201624000,"contributors":[{"name":"yqiChen","email":"chenyuqi1229@gmail.com","commits":1}]},"readingTime":{"minutes":6.61,"words":1984},"filePathRelative":"posts/后端/springboot/缓存.md","localizedDate":"2024年6月11日","excerpt":"<!--more--->\\n<h1>SpringCache 缓存</h1>\\n<h2>一、Redis缓存</h2>\\n<p>在增删改的时候清理缓存，查找的时候添加</p>\\n<h3>1、清理缓存</h3>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code> \\t<span class=\\"token doc-comment comment\\">/**\\n     * 清理缓存数据\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">pattern</span>\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">cleancache</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> pattern<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"clean redis cache\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Set</span> keys <span class=\\"token operator\\">=</span> redisTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">keys</span><span class=\\"token punctuation\\">(</span>pattern<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        redisTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span>keys<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
