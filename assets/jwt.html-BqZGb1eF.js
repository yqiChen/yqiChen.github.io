import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,b as t,o as e}from"./app-jl_0F-Zm.js";const p="/image/jwt1.png",o={},c=t('<h1 id="jwt令牌" tabindex="-1"><a class="header-anchor" href="#jwt令牌"><span>JWT令牌</span></a></h1><h2 id="二、jwt令牌" tabindex="-1"><a class="header-anchor" href="#二、jwt令牌"><span>二、JWT令牌</span></a></h2><h3 id="_1、原理" tabindex="-1"><a class="header-anchor" href="#_1、原理"><span>1、原理</span></a></h3><p><code>JSON Web Token（JWT）</code>是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。</p><h4 id="_1-jwt认证流程" tabindex="-1"><a class="header-anchor" href="#_1-jwt认证流程"><span>1) <strong>jwt认证流程：</strong></span></a></h4><img src="'+p+`" alt=" " style="zoom:50%;"><div class="hint-container tip"><p class="hint-container-title">优缺点</p><p><strong>优点：</strong></p><ol><li>jwt基于json，非常方便解析。</li><li>可以在令牌中自定义丰富的内容，易扩展。</li><li>通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。</li><li>资源服务使用JWT可不依赖认证服务即可完成授权。</li></ol><p><strong>缺点：</strong> JWT令牌较长，占存储空间比较大。</p></div><h4 id="_2-jwt令牌结构" tabindex="-1"><a class="header-anchor" href="#_2-jwt令牌结构"><span>2) <strong>JWT令牌结构：</strong></span></a></h4><p>JWT令牌由三部分组成，每部分中间使用点（.）分隔，比如：xxxxx.yyyyy.zzzzz</p><p><strong>Header</strong> 头部包括令牌的类型（即JWT）及使用的哈希算法（如HMAC SHA256或RSA） 一个例子如下：</p><p>下边是Header部分的内容</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
	&quot;alg&quot;: &quot;HS256&quot;,
	&quot;typ&quot;: &quot;JWT&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上边的内容使用Base64Url编码，得到一个字符串就是JWT令牌的第一部分。</p><p><strong>Payload</strong> 第二部分是负载，内容也是一个json对象，它是存放有效信息的地方，它可以存放jwt提供的现成字段，比如：iss（签发者）,exp（过期时间戳）, sub（面向的用户）等，也可自定义字段。此部分不建议存放敏感信息，因为此部分可以解码还原原始内容。最后将第二部分负载使用Base64Url编码，得到一个字符串就是JWT令牌的第二部分。 一个例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
	&quot;sub&quot;: &quot;1234567890&quot;,
	&quot;name&quot;: &quot;456&quot;,
	&quot;admin&quot;: true
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Signature</strong> 第三部分是签名，此部分用于防止jwt内容被篡改。 这个部分使用base64url将前两部分进行编码，编码后使用点（.）连接组成字符串，最后使用header中声明签名算法进行签名。 一个例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>HMACSHA256(
base64UrlEncode(header) + &quot;.&quot; +
base64UrlEncode(payload),
secret)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>base64UrlEncode(header)</code>：jwt令牌的第一部分。 <code>base64UrlEncode(payload)</code>：jwt令牌的第二部分。 <code>secret</code>：签名所使用的密钥。</p><h4 id="_3-jwt常见的相关问题" tabindex="-1"><a class="header-anchor" href="#_3-jwt常见的相关问题"><span>3) JWT常见的相关问题</span></a></h4><p>（1）Base64 是可逆的， 那JWT 安全吗?</p><p>​ Base64编码方式是可逆的，也就是透过编码后发放的Token内容是可以被解析的。一般而言，我们都不建议在有效载荷内放敏感讯息，比如使用者的密码。</p><p>（2）JWT Payload 內容可以被伪造吗？</p><p>​ JWT中的签名Signature可以防止通过Base64可逆方法回推有效载荷内容并将其修改。因为Signature是经由Header跟Payload一起Base64组成的。</p><p>（3）JWT空间及长度问题？</p><p>​ JWT Token通常长度不会太小，特别是Stateless JWT Token，把所有的数据都编在Token里，很快的就会超过Cookie的大小（4K）或者是URL长度限制。</p><p>（4）JWT失效问题？</p><pre><code>	无状态JWT令牌（Stateless JWT Token）发放出去之后，不能通过服务器端让令牌失效，必须等到过期时间过才会失去效用。假设在这之间Token被拦截，或者有权限管理身份的差异造成授权Scope修改，都不能阻止发出去的Token失效并要求使用者重新请求新的Token。
</code></pre><h3 id="_2、jwt、session、cookie的区别" tabindex="-1"><a class="header-anchor" href="#_2、jwt、session、cookie的区别"><span>2、JWT、Session、Cookie的区别</span></a></h3><p><strong>相同点</strong></p><p>JWT、Session、Cookie都提供安全的用户身份认证</p><p><strong>不同点</strong></p><p>​ ①JWT具有加密签名，Session和cookie没有</p><p>​ ②JWT无状态，声明存储在客户端，而不是存储在服务端内存。Cookie和Session有状态，存储在服务器内存中。</p><p>​ ③JWT身份验证在本地，不需要请求查询数据库，减少大量的资源消耗，可以对用户进行多次身份验证。Session和Cookie验证的过程会消耗大量的服务器资源。</p><p>​ ④Session和Cookie只能用在单个节点的域或者它的子域中有效，第三个节点访问会被禁止，不可跨域。JWT支持跨域认证，能够通过多个节点进行用户认证，就是跨域认证。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Cookie：保存在客户端，大小有限制，有状态，除非特殊情况客户端每次请求头都会默认带上cookie</p><p>Session：保存在服务器，服务器有一定的资源开销，允许第三方调用API接口，不跨域，不实现与第三方共享资源。</p><p>Token：保存在客户端，保存在任何地方，无限制，无状态</p><p>JWT：加密数据签名，自包含用户信息，减少查询数据库，分担服务器的资源压力，无状态，可以跨域认证。</p></div><h4 id="_1-使用cookie考虑问题" tabindex="-1"><a class="header-anchor" href="#_1-使用cookie考虑问题"><span>1) 使用cookie考虑问题</span></a></h4><p>​ ①存储在客户端，数据容易被篡改，使用前需要验证合法性</p><p>​ ②敏感数据一般不存放在cookie，不安全。</p><p>​ ③使用httpOnly在一定程度上可以提高安全性</p><p>​ ④存储数据有限制，一般是4KB，减少大数据内存的存储，cookie体积的占用。一个浏览器对一个网站最多存放20个cookie，浏览器一般只允许存放300个cookie。</p><p>​ ⑤设置正确的domain、path，减少数据传输</p><p>​ ⑥cookie不可以跨域</p><p>​ ⑦移动端对cookie支持性不良好，session也是基于cookie实现，移动端一般用token</p><h4 id="_2-使用session考虑问题" tabindex="-1"><a class="header-anchor" href="#_2-使用session考虑问题"><span>2)使用session考虑问题</span></a></h4><p>​ ①session存储在服务器内存，同时多用户在线，session会占据更多的内存，需要定期去服务端清除过期的session。</p><p>​ ②sessionid存储在cookie，是连接cookie和session的桥梁。浏览器禁止cookie不支持cookie，需要重写url。session基于cookie实现，但是不一定非要靠cookie才能实现。</p><p>​ ③网站采用集群部署的时候，多台web服务器之间无法共享session。session是单个服务器创建，处理用户请求不一定是同一台服务器，其他的服务器无法拿到之前放入单个服务器的session登录凭证信息。</p><p>​ ④session跨域问题，多个应用共享session时候，不同的引用部署在不同的主机，需要在各个应用之间做好cookie跨域处理。</p><p>​ ⑤移动端对cookie支持性不良好，session基于cookie实现，移动端一般用token</p><h4 id="_3-使用token考虑问题" tabindex="-1"><a class="header-anchor" href="#_3-使用token考虑问题"><span>3)使用token考虑问题</span></a></h4><p>​ ①token完全由应用管理，所以它可以避开同源策略</p><p>​ ②token存储在数据库中查询时间过长，可以考虑放在内存中，比如redis</p><p>​ ③token可以避免CSRF攻击</p><p>​ ④移动端常用token</p><h4 id="_4-使用jwt考虑问题" tabindex="-1"><a class="header-anchor" href="#_4-使用jwt考虑问题"><span>4)使用JWT考虑问题</span></a></h4><p>​ ①JWT不依赖cookie，使用任何域名提供API服务而不需要担心跨域资源共享问题（CORS）</p><p>​ ②JWT默认不加密，但也可以加密。生成原始token以后，可以用密钥再次加密。JWT不加密情况不建议把敏感数据放入其中</p><p>​ ③JWT不仅用于用户登录，也可以用于信息交流。JWT可以减低查询数据库的次数。</p><p>​ ④优点是服务器不再需要存储session，服务器认证鉴权有更好的可扩展性。</p><p>​ ⑤缺点是服务器不再需要存储session，无法废弃token或者更改token权限。JWT一旦签发直到过期之前都有效。</p><p>​ ⑥JWT自包含用户信息，一旦泄漏，任何人都可以盗用令牌的权限。为了减少盗用JWT有效期应该尽量的短。</p><p>​ ⑦JWT适合签发一次性的命令认证，颁发有限期极短的JWT，减少暴露的危险。每次操作都会生成新的JWT，不需要保存，实现真正的无状态。</p><p>​ ⑧减少盗用，JWT使用HTTPS传输协议较好，不建议使用HTTP。</p><h3 id="_3、使用" tabindex="-1"><a class="header-anchor" href="#_3、使用"><span>3、使用</span></a></h3><p><strong>依赖：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jwtUtils:</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> signKey <span class="token operator">=</span> <span class="token string">&quot;ruyiwei&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//签名</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> expire <span class="token operator">=</span> <span class="token number">43200000L</span><span class="token punctuation">;</span>		<span class="token comment">//有效时长</span>

    <span class="token doc-comment comment">/**
     * 生成JWT令牌
     * <span class="token keyword">@param</span> <span class="token parameter">claims</span> JWT第二部分负载 payload 中存储的内容
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generateJwt</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">,</span> signKey<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expire<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> jwt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 解析JWT令牌
     * <span class="token keyword">@param</span> <span class="token parameter">jwt</span> JWT令牌
     * <span class="token keyword">@return</span> JWT第二部分负载 payload 中存储的内容
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Claims</span> <span class="token function">parseJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> jwt<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>signKey<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> claims<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>登录校验：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Emp</span> emp<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;员工登录：{}&quot;</span><span class="token punctuation">,</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Emp</span> e <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//登录成功生成并下发令牌</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">generateJwt</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//登录失败，返回错误信息</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;用户名或密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><p>[1] <a href="https://blog.csdn.net/a772304419/article/details/132085742" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/a772304419/article/details/132085742</a></p><p>[2] <a href="https://blog.csdn.net/qq_41895003/article/details/130567062" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_41895003/article/details/130567062</a></p><p>[3] <a href="https://blog.csdn.net/weixin_45709829/article/details/124003742" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_45709829/article/details/124003742</a></p>`,75);function i(l,u){return e(),s("div",null,[a("more-"),c])}const k=n(o,[["render",i],["__file","jwt.html.vue"]]),m=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/springboot/jwt.html","title":"JWT令牌以及登录验证","lang":"zh-CN","frontmatter":{"title":"JWT令牌以及登录验证","date":"2024-05-25T16:32:00.000Z","tags":"code","category":["工具","SpringBoot"],"order":3,"icon":"/img/jwt.svg","description":"JWT令牌 二、JWT令牌 1、原理 JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。 1) jwt认证流程： 优缺点 优点： jwt基于j...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/springboot/jwt.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"JWT令牌以及登录验证"}],["meta",{"property":"og:description","content":"JWT令牌 二、JWT令牌 1、原理 JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。 1) jwt认证流程： 优缺点 优点： jwt基于j..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-09T11:07:04.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-05-25T16:32:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-09T11:07:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JWT令牌以及登录验证\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-25T16:32:00.000Z\\",\\"dateModified\\":\\"2024-08-09T11:07:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"二、JWT令牌","slug":"二、jwt令牌","link":"#二、jwt令牌","children":[{"level":3,"title":"1、原理","slug":"_1、原理","link":"#_1、原理","children":[]},{"level":3,"title":"2、JWT、Session、Cookie的区别","slug":"_2、jwt、session、cookie的区别","link":"#_2、jwt、session、cookie的区别","children":[]},{"level":3,"title":"3、使用","slug":"_3、使用","link":"#_3、使用","children":[]}]}],"git":{"createdTime":1723201624000,"updatedTime":1723201624000,"contributors":[{"name":"yqiChen","email":"chenyuqi1229@gmail.com","commits":1}]},"readingTime":{"minutes":7.38,"words":2213},"filePathRelative":"posts/后端/springboot/jwt.md","localizedDate":"2024年5月25日","excerpt":"<!--more--->\\n<h1>JWT令牌</h1>\\n<h2>二、JWT令牌</h2>\\n<h3>1、原理</h3>\\n<p><code>JSON Web Token（JWT）</code>是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。</p>\\n<h4>1) <strong>jwt认证流程：</strong></h4>\\n<img src=\\"/image\\\\jwt1.png\\" alt=\\" \\" style=\\"zoom:50%;\\">","autoDesc":true}');export{k as comp,m as data};
